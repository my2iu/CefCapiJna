package cef;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_task_capi.h:18</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_task_runner_t extends Structure {
	/** C type : cef_base_t */
	public cef_base_t base;
	/** C type : is_same_callback* */
	public cef.cef_v8value_t.is_same_callback is_same;
	/** C type : belongs_to_current_thread_callback* */
	public cef_task_runner_t.belongs_to_current_thread_callback belongs_to_current_thread;
	/** C type : belongs_to_thread_callback* */
	public cef_task_runner_t.belongs_to_thread_callback belongs_to_thread;
	/** C type : post_task_callback* */
	public cef_task_runner_t.post_task_callback post_task;
	/** C type : post_delayed_task_callback* */
	public cef_task_runner_t.post_delayed_task_callback post_delayed_task;
	/** <i>native declaration : include\capi\cef_task_capi.h:13</i> */
	public interface is_same_callback extends Callback {
		int apply(cef_task_runner_t self, cef_task_runner_t that);
	};
	/** <i>native declaration : include\capi\cef_task_capi.h:14</i> */
	public interface belongs_to_current_thread_callback extends Callback {
		int apply(cef_task_runner_t self);
	};
	/** <i>native declaration : include\capi\cef_task_capi.h:15</i> */
	public interface belongs_to_thread_callback extends Callback {
		int apply(cef_task_runner_t self, int threadId);
	};
	/** <i>native declaration : include\capi\cef_task_capi.h:16</i> */
	public interface post_task_callback extends Callback {
		int apply(cef_task_runner_t self, cef_task_t task);
	};
	/** <i>native declaration : include\capi\cef_task_capi.h:17</i> */
	public interface post_delayed_task_callback extends Callback {
		int apply(cef_task_runner_t self, cef_task_t task, long delay_ms);
	};
	public cef_task_runner_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("base", "is_same", "belongs_to_current_thread", "belongs_to_thread", "post_task", "post_delayed_task");
	}
	/**
	 * @param base C type : cef_base_t<br>
	 * @param is_same C type : is_same_callback*<br>
	 * @param belongs_to_current_thread C type : belongs_to_current_thread_callback*<br>
	 * @param belongs_to_thread C type : belongs_to_thread_callback*<br>
	 * @param post_task C type : post_task_callback*<br>
	 * @param post_delayed_task C type : post_delayed_task_callback*
	 */
	public cef_task_runner_t(cef_base_t base, cef.cef_v8value_t.is_same_callback is_same, cef_task_runner_t.belongs_to_current_thread_callback belongs_to_current_thread, cef_task_runner_t.belongs_to_thread_callback belongs_to_thread, cef_task_runner_t.post_task_callback post_task, cef_task_runner_t.post_delayed_task_callback post_delayed_task) {
		super();
		this.base = base;
		this.is_same = is_same;
		this.belongs_to_current_thread = belongs_to_current_thread;
		this.belongs_to_thread = belongs_to_thread;
		this.post_task = post_task;
		this.post_delayed_task = post_delayed_task;
	}
	public cef_task_runner_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_task_runner_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_task_runner_t implements Structure.ByValue {
		
	};
}
