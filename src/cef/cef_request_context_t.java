package cef;
import cef.CefLibrary._cef_dictionary_value_t;
import cef.CefLibrary._cef_value_t;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_request_context_capi.h:47</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_request_context_t extends Structure {
	/** C type : cef_base_t */
	public cef_base_t base;
	/** C type : is_same_callback* */
	public cef.cef_v8value_t.is_same_callback is_same;
	/** C type : is_sharing_with_callback* */
	public cef_request_context_t.is_sharing_with_callback is_sharing_with;
	/** C type : is_global_callback* */
	public cef_request_context_t.is_global_callback is_global;
	/** C type : get_handler_callback* */
	public cef_request_context_t.get_handler_callback get_handler;
	/** C type : get_default_cookie_manager_callback* */
	public cef_request_context_t.get_default_cookie_manager_callback get_default_cookie_manager;
	/** C type : register_scheme_handler_factory_callback* */
	public cef_request_context_t.register_scheme_handler_factory_callback register_scheme_handler_factory;
	/** C type : clear_scheme_handler_factories_callback* */
	public cef_request_context_t.clear_scheme_handler_factories_callback clear_scheme_handler_factories;
	/** C type : purge_plugin_list_cache_callback* */
	public cef_request_context_t.purge_plugin_list_cache_callback purge_plugin_list_cache;
	/** C type : has_preference_callback* */
	public cef_request_context_t.has_preference_callback has_preference;
	/** C type : get_preference_callback* */
	public cef_request_context_t.get_preference_callback get_preference;
	/** C type : get_all_preferences_callback* */
	public cef_request_context_t.get_all_preferences_callback get_all_preferences;
	/** C type : can_set_preference_callback* */
	public cef_request_context_t.can_set_preference_callback can_set_preference;
	/** C type : set_preference_callback* */
	public cef_request_context_t.set_preference_callback set_preference;
	/** C type : clear_certificate_exceptions_callback* */
	public cef_request_context_t.clear_certificate_exceptions_callback clear_certificate_exceptions;
	/** C type : close_all_connections_callback* */
	public cef_request_context_t.close_all_connections_callback close_all_connections;
	/** C type : resolve_host_callback* */
	public cef_request_context_t.resolve_host_callback resolve_host;
	/** <i>native declaration : include\capi\cef_request_context_capi.h:29</i> */
	public interface is_same_callback extends Callback {
		int apply(cef_request_context_t self, cef_request_context_t other);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:30</i> */
	public interface is_sharing_with_callback extends Callback {
		int apply(cef_request_context_t self, cef_request_context_t other);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:31</i> */
	public interface is_global_callback extends Callback {
		int apply(cef_request_context_t self);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:32</i> */
	public interface get_handler_callback extends Callback {
		cef_request_context_handler_t apply(cef_request_context_t self);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:33</i> */
	public interface cef_string_userfree_t_callback extends Callback {
		int apply(cef_request_context_t self);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:34</i> */
	public interface get_default_cookie_manager_callback extends Callback {
		cef_cookie_manager_t apply(cef_request_context_t self, cef_completion_callback_t callback);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:35</i> */
	public interface register_scheme_handler_factory_callback extends Callback {
		int apply(cef_request_context_t self, cef_string_utf16_t scheme_name, cef_string_utf16_t domain_name, cef_scheme_handler_factory_t factory);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:36</i> */
	public interface clear_scheme_handler_factories_callback extends Callback {
		int apply(cef_request_context_t self);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:37</i> */
	public interface purge_plugin_list_cache_callback extends Callback {
		void apply(cef_request_context_t self, int reload_pages);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:38</i> */
	public interface has_preference_callback extends Callback {
		int apply(cef_request_context_t self, cef_string_utf16_t name);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:39</i> */
	public interface get_preference_callback extends Callback {
		_cef_value_t apply(cef_request_context_t self, cef_string_utf16_t name);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:40</i> */
	public interface get_all_preferences_callback extends Callback {
		_cef_dictionary_value_t apply(cef_request_context_t self, int include_defaults);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:41</i> */
	public interface can_set_preference_callback extends Callback {
		int apply(cef_request_context_t self, cef_string_utf16_t name);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:42</i> */
	public interface set_preference_callback extends Callback {
		int apply(cef_request_context_t self, cef_string_utf16_t name, _cef_value_t value, cef_string_utf16_t error);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:43</i> */
	public interface clear_certificate_exceptions_callback extends Callback {
		void apply(cef_request_context_t self, cef_completion_callback_t callback);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:44</i> */
	public interface close_all_connections_callback extends Callback {
		void apply(cef_request_context_t self, cef_completion_callback_t callback);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:45</i> */
	public interface resolve_host_callback extends Callback {
		void apply(cef_request_context_t self, cef_string_utf16_t origin, cef_resolve_callback_t callback);
	};
	/** <i>native declaration : include\capi\cef_request_context_capi.h:46</i> */
	public interface cef_errorcode_t_callback extends Callback {
		int apply(cef_request_context_t self, cef_string_utf16_t origin, Pointer resolved_ips);
	};
	public cef_request_context_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("base", "is_same", "is_sharing_with", "is_global", "get_handler", "get_default_cookie_manager", "register_scheme_handler_factory", "clear_scheme_handler_factories", "purge_plugin_list_cache", "has_preference", "get_preference", "get_all_preferences", "can_set_preference", "set_preference", "clear_certificate_exceptions", "close_all_connections", "resolve_host");
	}
	public cef_request_context_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_request_context_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_request_context_t implements Structure.ByValue {
		
	};
}
