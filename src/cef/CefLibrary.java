package cef;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>cef</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CefLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "libcef";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CefLibrary.JNA_LIBRARY_NAME);
	public static final CefLibrary INSTANCE = (CefLibrary)Native.loadLibrary(CefLibrary.JNA_LIBRARY_NAME, CefLibrary.class);
	/**
	 * <i>native declaration : include\internal\cef_types.h:10</i><br>
	 * enum values
	 */
	public static interface cef_log_severity_t {
		/** <i>native declaration : include\internal\cef_types.h:4</i> */
		public static final int LOGSEVERITY_DEFAULT = 0;
		/** <i>native declaration : include\internal\cef_types.h:5</i> */
		public static final int LOGSEVERITY_VERBOSE = 1;
		/** <i>native declaration : include\internal\cef_types.h:6</i> */
		public static final int LOGSEVERITY_INFO = 2;
		/** <i>native declaration : include\internal\cef_types.h:7</i> */
		public static final int LOGSEVERITY_WARNING = 3;
		/** <i>native declaration : include\internal\cef_types.h:8</i> */
		public static final int LOGSEVERITY_ERROR = 4;
		/** <i>native declaration : include\internal\cef_types.h:9</i> */
		public static final int LOGSEVERITY_DISABLE = 99;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:15</i><br>
	 * enum values
	 */
	public static interface cef_state_t {
		/** <i>native declaration : include\internal\cef_types.h:12</i> */
		public static final int STATE_DEFAULT = 0;
		/** <i>native declaration : include\internal\cef_types.h:13</i> */
		public static final int STATE_ENABLED = 1;
		/** <i>native declaration : include\internal\cef_types.h:14</i> */
		public static final int STATE_DISABLED = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:92</i><br>
	 * enum values
	 */
	public static interface cef_return_value_t {
		/** <i>native declaration : include\internal\cef_types.h:89</i> */
		public static final int RV_CANCEL = 0;
		/** <i>native declaration : include\internal\cef_types.h:90</i> */
		public static final int RV_CONTINUE = 1;
		/** <i>native declaration : include\internal\cef_types.h:91</i> */
		public static final int RV_CONTINUE_ASYNC = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:120</i><br>
	 * enum values
	 */
	public static interface cef_termination_status_t {
		/** <i>native declaration : include\internal\cef_types.h:117</i> */
		public static final int TS_ABNORMAL_TERMINATION = 0;
		/** <i>native declaration : include\internal\cef_types.h:118</i> */
		public static final int TS_PROCESS_WAS_KILLED = 1;
		/** <i>native declaration : include\internal\cef_types.h:119</i> */
		public static final int TS_PROCESS_CRASHED = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:130</i><br>
	 * enum values
	 */
	public static interface cef_path_key_t {
		/** <i>native declaration : include\internal\cef_types.h:122</i> */
		public static final int PK_DIR_CURRENT = 0;
		/** <i>native declaration : include\internal\cef_types.h:123</i> */
		public static final int PK_DIR_EXE = 1;
		/** <i>native declaration : include\internal\cef_types.h:124</i> */
		public static final int PK_DIR_MODULE = 2;
		/** <i>native declaration : include\internal\cef_types.h:125</i> */
		public static final int PK_DIR_TEMP = 3;
		/** <i>native declaration : include\internal\cef_types.h:126</i> */
		public static final int PK_FILE_EXE = 4;
		/** <i>native declaration : include\internal\cef_types.h:127</i> */
		public static final int PK_FILE_MODULE = 5;
		/** <i>native declaration : include\internal\cef_types.h:128</i> */
		public static final int PK_LOCAL_APP_DATA = 6;
		/** <i>native declaration : include\internal\cef_types.h:129</i> */
		public static final int PK_USER_DATA = 7;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:134</i><br>
	 * enum values
	 */
	public static interface cef_storage_type_t {
		/** <i>native declaration : include\internal\cef_types.h:132</i> */
		public static final int ST_LOCALSTORAGE = 0;
		/** <i>native declaration : include\internal\cef_types.h:133</i> */
		public static final int ST_SESSIONSTORAGE = 1;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:191</i><br>
	 * enum values
	 */
	public static interface cef_errorcode_t {
		/** <i>native declaration : include\internal\cef_types.h:136</i> */
		public static final int ERR_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:137</i> */
		public static final int ERR_FAILED = -2;
		/** <i>native declaration : include\internal\cef_types.h:138</i> */
		public static final int ERR_ABORTED = -3;
		/** <i>native declaration : include\internal\cef_types.h:139</i> */
		public static final int ERR_INVALID_ARGUMENT = -4;
		/** <i>native declaration : include\internal\cef_types.h:140</i> */
		public static final int ERR_INVALID_HANDLE = -5;
		/** <i>native declaration : include\internal\cef_types.h:141</i> */
		public static final int ERR_FILE_NOT_FOUND = -6;
		/** <i>native declaration : include\internal\cef_types.h:142</i> */
		public static final int ERR_TIMED_OUT = -7;
		/** <i>native declaration : include\internal\cef_types.h:143</i> */
		public static final int ERR_FILE_TOO_BIG = -8;
		/** <i>native declaration : include\internal\cef_types.h:144</i> */
		public static final int ERR_UNEXPECTED = -9;
		/** <i>native declaration : include\internal\cef_types.h:145</i> */
		public static final int ERR_ACCESS_DENIED = -10;
		/** <i>native declaration : include\internal\cef_types.h:146</i> */
		public static final int ERR_NOT_IMPLEMENTED = -11;
		/** <i>native declaration : include\internal\cef_types.h:147</i> */
		public static final int ERR_CONNECTION_CLOSED = -100;
		/** <i>native declaration : include\internal\cef_types.h:148</i> */
		public static final int ERR_CONNECTION_RESET = -101;
		/** <i>native declaration : include\internal\cef_types.h:149</i> */
		public static final int ERR_CONNECTION_REFUSED = -102;
		/** <i>native declaration : include\internal\cef_types.h:150</i> */
		public static final int ERR_CONNECTION_ABORTED = -103;
		/** <i>native declaration : include\internal\cef_types.h:151</i> */
		public static final int ERR_CONNECTION_FAILED = -104;
		/** <i>native declaration : include\internal\cef_types.h:152</i> */
		public static final int ERR_NAME_NOT_RESOLVED = -105;
		/** <i>native declaration : include\internal\cef_types.h:153</i> */
		public static final int ERR_INTERNET_DISCONNECTED = -106;
		/** <i>native declaration : include\internal\cef_types.h:154</i> */
		public static final int ERR_SSL_PROTOCOL_ERROR = -107;
		/** <i>native declaration : include\internal\cef_types.h:155</i> */
		public static final int ERR_ADDRESS_INVALID = -108;
		/** <i>native declaration : include\internal\cef_types.h:156</i> */
		public static final int ERR_ADDRESS_UNREACHABLE = -109;
		/** <i>native declaration : include\internal\cef_types.h:157</i> */
		public static final int ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110;
		/** <i>native declaration : include\internal\cef_types.h:158</i> */
		public static final int ERR_TUNNEL_CONNECTION_FAILED = -111;
		/** <i>native declaration : include\internal\cef_types.h:159</i> */
		public static final int ERR_NO_SSL_VERSIONS_ENABLED = -112;
		/** <i>native declaration : include\internal\cef_types.h:160</i> */
		public static final int ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113;
		/** <i>native declaration : include\internal\cef_types.h:161</i> */
		public static final int ERR_SSL_RENEGOTIATION_REQUESTED = -114;
		/** <i>native declaration : include\internal\cef_types.h:162</i> */
		public static final int ERR_CERT_COMMON_NAME_INVALID = -200;
		/** <i>native declaration : include\internal\cef_types.h:163</i> */
		public static final int ERR_CERT_BEGIN = (int)CefLibrary.cef_errorcode_t.ERR_CERT_COMMON_NAME_INVALID;
		/** <i>native declaration : include\internal\cef_types.h:164</i> */
		public static final int ERR_CERT_DATE_INVALID = -201;
		/** <i>native declaration : include\internal\cef_types.h:165</i> */
		public static final int ERR_CERT_AUTHORITY_INVALID = -202;
		/** <i>native declaration : include\internal\cef_types.h:166</i> */
		public static final int ERR_CERT_CONTAINS_ERRORS = -203;
		/** <i>native declaration : include\internal\cef_types.h:167</i> */
		public static final int ERR_CERT_NO_REVOCATION_MECHANISM = -204;
		/** <i>native declaration : include\internal\cef_types.h:168</i> */
		public static final int ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205;
		/** <i>native declaration : include\internal\cef_types.h:169</i> */
		public static final int ERR_CERT_REVOKED = -206;
		/** <i>native declaration : include\internal\cef_types.h:170</i> */
		public static final int ERR_CERT_INVALID = -207;
		/** <i>native declaration : include\internal\cef_types.h:171</i> */
		public static final int ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208;
		/** <i>native declaration : include\internal\cef_types.h:172</i> */
		public static final int ERR_CERT_NON_UNIQUE_NAME = -210;
		/** <i>native declaration : include\internal\cef_types.h:173</i> */
		public static final int ERR_CERT_WEAK_KEY = -211;
		/** <i>native declaration : include\internal\cef_types.h:174</i> */
		public static final int ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212;
		/** <i>native declaration : include\internal\cef_types.h:175</i> */
		public static final int ERR_CERT_VALIDITY_TOO_LONG = -213;
		/** <i>native declaration : include\internal\cef_types.h:176</i> */
		public static final int ERR_CERT_END = (int)CefLibrary.cef_errorcode_t.ERR_CERT_VALIDITY_TOO_LONG;
		/** <i>native declaration : include\internal\cef_types.h:177</i> */
		public static final int ERR_INVALID_URL = -300;
		/** <i>native declaration : include\internal\cef_types.h:178</i> */
		public static final int ERR_DISALLOWED_URL_SCHEME = -301;
		/** <i>native declaration : include\internal\cef_types.h:179</i> */
		public static final int ERR_UNKNOWN_URL_SCHEME = -302;
		/** <i>native declaration : include\internal\cef_types.h:180</i> */
		public static final int ERR_TOO_MANY_REDIRECTS = -310;
		/** <i>native declaration : include\internal\cef_types.h:181</i> */
		public static final int ERR_UNSAFE_REDIRECT = -311;
		/** <i>native declaration : include\internal\cef_types.h:182</i> */
		public static final int ERR_UNSAFE_PORT = -312;
		/** <i>native declaration : include\internal\cef_types.h:183</i> */
		public static final int ERR_INVALID_RESPONSE = -320;
		/** <i>native declaration : include\internal\cef_types.h:184</i> */
		public static final int ERR_INVALID_CHUNKED_ENCODING = -321;
		/** <i>native declaration : include\internal\cef_types.h:185</i> */
		public static final int ERR_METHOD_NOT_SUPPORTED = -322;
		/** <i>native declaration : include\internal\cef_types.h:186</i> */
		public static final int ERR_UNEXPECTED_PROXY_AUTH = -323;
		/** <i>native declaration : include\internal\cef_types.h:187</i> */
		public static final int ERR_EMPTY_RESPONSE = -324;
		/** <i>native declaration : include\internal\cef_types.h:188</i> */
		public static final int ERR_RESPONSE_HEADERS_TOO_BIG = -325;
		/** <i>native declaration : include\internal\cef_types.h:189</i> */
		public static final int ERR_CACHE_MISS = -400;
		/** <i>native declaration : include\internal\cef_types.h:190</i> */
		public static final int ERR_INSECURE_RESPONSE = -501;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:211</i><br>
	 * enum values
	 */
	public static interface cef_cert_status_t {
		/** <i>native declaration : include\internal\cef_types.h:193</i> */
		public static final int CERT_STATUS_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:194</i> */
		public static final int CERT_STATUS_COMMON_NAME_INVALID = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:195</i> */
		public static final int CERT_STATUS_DATE_INVALID = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:196</i> */
		public static final int CERT_STATUS_AUTHORITY_INVALID = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:197</i> */
		public static final int CERT_STATUS_NO_REVOCATION_MECHANISM = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:198</i> */
		public static final int CERT_STATUS_UNABLE_TO_CHECK_REVOCATION = 1 << 5;
		/** <i>native declaration : include\internal\cef_types.h:199</i> */
		public static final int CERT_STATUS_REVOKED = 1 << 6;
		/** <i>native declaration : include\internal\cef_types.h:200</i> */
		public static final int CERT_STATUS_INVALID = 1 << 7;
		/** <i>native declaration : include\internal\cef_types.h:201</i> */
		public static final int CERT_STATUS_WEAK_SIGNATURE_ALGORITHM = 1 << 8;
		/** <i>native declaration : include\internal\cef_types.h:202</i> */
		public static final int CERT_STATUS_NON_UNIQUE_NAME = 1 << 10;
		/** <i>native declaration : include\internal\cef_types.h:203</i> */
		public static final int CERT_STATUS_WEAK_KEY = 1 << 11;
		/** <i>native declaration : include\internal\cef_types.h:204</i> */
		public static final int CERT_STATUS_PINNED_KEY_MISSING = 1 << 13;
		/** <i>native declaration : include\internal\cef_types.h:205</i> */
		public static final int CERT_STATUS_NAME_CONSTRAINT_VIOLATION = 1 << 14;
		/** <i>native declaration : include\internal\cef_types.h:206</i> */
		public static final int CERT_STATUS_VALIDITY_TOO_LONG = 1 << 15;
		/** <i>native declaration : include\internal\cef_types.h:207</i> */
		public static final int CERT_STATUS_IS_EV = 1 << 16;
		/** <i>native declaration : include\internal\cef_types.h:208</i> */
		public static final int CERT_STATUS_REV_CHECKING_ENABLED = 1 << 17;
		/** <i>native declaration : include\internal\cef_types.h:209</i> */
		public static final int CERT_STATUS_SHA1_SIGNATURE_PRESENT = 1 << 19;
		/** <i>native declaration : include\internal\cef_types.h:210</i> */
		public static final int CERT_STATUS_CT_COMPLIANCE_FAILED = 1 << 20;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:224</i><br>
	 * enum values
	 */
	public static interface cef_window_open_disposition_t {
		/** <i>native declaration : include\internal\cef_types.h:213</i> */
		public static final int WOD_UNKNOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:214</i> */
		public static final int WOD_SUPPRESS_OPEN = 1;
		/** <i>native declaration : include\internal\cef_types.h:215</i> */
		public static final int WOD_CURRENT_TAB = 2;
		/** <i>native declaration : include\internal\cef_types.h:216</i> */
		public static final int WOD_SINGLETON_TAB = 3;
		/** <i>native declaration : include\internal\cef_types.h:217</i> */
		public static final int WOD_NEW_FOREGROUND_TAB = 4;
		/** <i>native declaration : include\internal\cef_types.h:218</i> */
		public static final int WOD_NEW_BACKGROUND_TAB = 5;
		/** <i>native declaration : include\internal\cef_types.h:219</i> */
		public static final int WOD_NEW_POPUP = 6;
		/** <i>native declaration : include\internal\cef_types.h:220</i> */
		public static final int WOD_NEW_WINDOW = 7;
		/** <i>native declaration : include\internal\cef_types.h:221</i> */
		public static final int WOD_SAVE_TO_DISK = 8;
		/** <i>native declaration : include\internal\cef_types.h:222</i> */
		public static final int WOD_OFF_THE_RECORD = 9;
		/** <i>native declaration : include\internal\cef_types.h:223</i> */
		public static final int WOD_IGNORE_ACTION = 10;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:234</i><br>
	 * enum values
	 */
	public static interface cef_drag_operations_mask_t {
		/** <i>native declaration : include\internal\cef_types.h:226</i> */
		public static final int DRAG_OPERATION_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:227</i> */
		public static final int DRAG_OPERATION_COPY = 1;
		/** <i>native declaration : include\internal\cef_types.h:228</i> */
		public static final int DRAG_OPERATION_LINK = 2;
		/** <i>native declaration : include\internal\cef_types.h:229</i> */
		public static final int DRAG_OPERATION_GENERIC = 4;
		/** <i>native declaration : include\internal\cef_types.h:230</i> */
		public static final int DRAG_OPERATION_PRIVATE = 8;
		/** <i>native declaration : include\internal\cef_types.h:231</i> */
		public static final int DRAG_OPERATION_MOVE = 16;
		/** <i>native declaration : include\internal\cef_types.h:232</i> */
		public static final int DRAG_OPERATION_DELETE = 32;
		/** Failed to infer type of Pair(UINT_MAX, null) */
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:240</i><br>
	 * enum values
	 */
	public static interface cef_v8_accesscontrol_t {
		/** <i>native declaration : include\internal\cef_types.h:236</i> */
		public static final int V8_ACCESS_CONTROL_DEFAULT = 0;
		/** <i>native declaration : include\internal\cef_types.h:237</i> */
		public static final int V8_ACCESS_CONTROL_ALL_CAN_READ = 1;
		/** <i>native declaration : include\internal\cef_types.h:238</i> */
		public static final int V8_ACCESS_CONTROL_ALL_CAN_WRITE = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:239</i> */
		public static final int V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 1 << 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:250</i><br>
	 * enum values
	 */
	public static interface cef_v8_propertyattribute_t {
		/**
		 * Writeable, Enumerable,<br>
		 * <i>native declaration : include\internal\cef_types.h:243</i>
		 */
		public static final int V8_PROPERTY_ATTRIBUTE_NONE = 0;
		/**
		 * Not writeable<br>
		 * <i>native declaration : include\internal\cef_types.h:245</i>
		 */
		public static final int V8_PROPERTY_ATTRIBUTE_READONLY = 1 << 0;
		/**
		 * Not enumerable<br>
		 * <i>native declaration : include\internal\cef_types.h:247</i>
		 */
		public static final int V8_PROPERTY_ATTRIBUTE_DONTENUM = 1 << 1;
		/**
		 * Not configurable<br>
		 * <i>native declaration : include\internal\cef_types.h:249</i>
		 */
		public static final int V8_PROPERTY_ATTRIBUTE_DONTDELETE = 1 << 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:255</i><br>
	 * enum values
	 */
	public static interface cef_postdataelement_type_t {
		/** <i>native declaration : include\internal\cef_types.h:252</i> */
		public static final int PDE_TYPE_EMPTY = 0;
		/** <i>native declaration : include\internal\cef_types.h:253</i> */
		public static final int PDE_TYPE_BYTES = 1;
		/** <i>native declaration : include\internal\cef_types.h:254</i> */
		public static final int PDE_TYPE_FILE = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:275</i><br>
	 * enum values
	 */
	public static interface cef_resource_type_t {
		/** <i>native declaration : include\internal\cef_types.h:257</i> */
		public static final int RT_MAIN_FRAME = 0;
		/** <i>native declaration : include\internal\cef_types.h:258</i> */
		public static final int RT_SUB_FRAME = 1;
		/** <i>native declaration : include\internal\cef_types.h:259</i> */
		public static final int RT_STYLESHEET = 2;
		/** <i>native declaration : include\internal\cef_types.h:260</i> */
		public static final int RT_SCRIPT = 3;
		/** <i>native declaration : include\internal\cef_types.h:261</i> */
		public static final int RT_IMAGE = 4;
		/** <i>native declaration : include\internal\cef_types.h:262</i> */
		public static final int RT_FONT_RESOURCE = 5;
		/** <i>native declaration : include\internal\cef_types.h:263</i> */
		public static final int RT_SUB_RESOURCE = 6;
		/** <i>native declaration : include\internal\cef_types.h:264</i> */
		public static final int RT_OBJECT = 7;
		/** <i>native declaration : include\internal\cef_types.h:265</i> */
		public static final int RT_MEDIA = 8;
		/** <i>native declaration : include\internal\cef_types.h:266</i> */
		public static final int RT_WORKER = 9;
		/** <i>native declaration : include\internal\cef_types.h:267</i> */
		public static final int RT_SHARED_WORKER = 10;
		/** <i>native declaration : include\internal\cef_types.h:268</i> */
		public static final int RT_PREFETCH = 11;
		/** <i>native declaration : include\internal\cef_types.h:269</i> */
		public static final int RT_FAVICON = 12;
		/** <i>native declaration : include\internal\cef_types.h:270</i> */
		public static final int RT_XHR = 13;
		/** <i>native declaration : include\internal\cef_types.h:271</i> */
		public static final int RT_PING = 14;
		/** <i>native declaration : include\internal\cef_types.h:272</i> */
		public static final int RT_SERVICE_WORKER = 15;
		/** <i>native declaration : include\internal\cef_types.h:273</i> */
		public static final int RT_CSP_REPORT = 16;
		/** <i>native declaration : include\internal\cef_types.h:274</i> */
		public static final int RT_PLUGIN_RESOURCE = 17;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:292</i><br>
	 * enum values
	 */
	public static interface cef_transition_type_t {
		/** <i>native declaration : include\internal\cef_types.h:277</i> */
		public static final int TT_LINK = 0;
		/** <i>native declaration : include\internal\cef_types.h:278</i> */
		public static final int TT_EXPLICIT = 1;
		/** <i>native declaration : include\internal\cef_types.h:279</i> */
		public static final int TT_AUTO_SUBFRAME = 3;
		/** <i>native declaration : include\internal\cef_types.h:280</i> */
		public static final int TT_MANUAL_SUBFRAME = 4;
		/** <i>native declaration : include\internal\cef_types.h:281</i> */
		public static final int TT_FORM_SUBMIT = 7;
		/** <i>native declaration : include\internal\cef_types.h:282</i> */
		public static final int TT_RELOAD = 8;
		/** <i>native declaration : include\internal\cef_types.h:283</i> */
		public static final int TT_SOURCE_MASK = 0xFF;
		/** <i>native declaration : include\internal\cef_types.h:284</i> */
		public static final int TT_BLOCKED_FLAG = 0x00800000;
		/** <i>native declaration : include\internal\cef_types.h:285</i> */
		public static final int TT_FORWARD_BACK_FLAG = 0x01000000;
		/** <i>native declaration : include\internal\cef_types.h:286</i> */
		public static final int TT_CHAIN_START_FLAG = 0x10000000;
		/** <i>native declaration : include\internal\cef_types.h:287</i> */
		public static final int TT_CHAIN_END_FLAG = 0x20000000;
		/** <i>native declaration : include\internal\cef_types.h:288</i> */
		public static final int TT_CLIENT_REDIRECT_FLAG = 0x40000000;
		/** <i>native declaration : include\internal\cef_types.h:289</i> */
		public static final int TT_SERVER_REDIRECT_FLAG = 0x80000000;
		/** <i>native declaration : include\internal\cef_types.h:290</i> */
		public static final int TT_IS_REDIRECT_MASK = 0xC0000000;
		/** <i>native declaration : include\internal\cef_types.h:291</i> */
		public static final int TT_QUALIFIER_MASK = 0xFFFFFF00;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:300</i><br>
	 * enum values
	 */
	public static interface cef_urlrequest_flags_t {
		/** <i>native declaration : include\internal\cef_types.h:294</i> */
		public static final int UR_FLAG_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:295</i> */
		public static final int UR_FLAG_SKIP_CACHE = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:296</i> */
		public static final int UR_FLAG_ALLOW_CACHED_CREDENTIALS = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:297</i> */
		public static final int UR_FLAG_REPORT_UPLOAD_PROGRESS = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:298</i> */
		public static final int UR_FLAG_NO_DOWNLOAD_DATA = 1 << 6;
		/** <i>native declaration : include\internal\cef_types.h:299</i> */
		public static final int UR_FLAG_NO_RETRY_ON_5XX = 1 << 7;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:307</i><br>
	 * enum values
	 */
	public static interface cef_urlrequest_status_t {
		/** <i>native declaration : include\internal\cef_types.h:302</i> */
		public static final int UR_UNKNOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:303</i> */
		public static final int UR_SUCCESS = 1;
		/** <i>native declaration : include\internal\cef_types.h:304</i> */
		public static final int UR_IO_PENDING = 2;
		/** <i>native declaration : include\internal\cef_types.h:305</i> */
		public static final int UR_CANCELED = 3;
		/** <i>native declaration : include\internal\cef_types.h:306</i> */
		public static final int UR_FAILED = 4;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:339</i><br>
	 * enum values
	 */
	public static interface cef_process_id_t {
		/** <i>native declaration : include\internal\cef_types.h:337</i> */
		public static final int PID_BROWSER = 0;
		/** <i>native declaration : include\internal\cef_types.h:338</i> */
		public static final int PID_RENDERER = 1;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:349</i><br>
	 * enum values
	 */
	public static interface cef_thread_id_t {
		/** <i>native declaration : include\internal\cef_types.h:341</i> */
		public static final int TID_UI = 0;
		/** <i>native declaration : include\internal\cef_types.h:342</i> */
		public static final int TID_DB = 1;
		/** <i>native declaration : include\internal\cef_types.h:343</i> */
		public static final int TID_FILE = 2;
		/** <i>native declaration : include\internal\cef_types.h:344</i> */
		public static final int TID_FILE_USER_BLOCKING = 3;
		/** <i>native declaration : include\internal\cef_types.h:345</i> */
		public static final int TID_PROCESS_LAUNCHER = 4;
		/** <i>native declaration : include\internal\cef_types.h:346</i> */
		public static final int TID_CACHE = 5;
		/** <i>native declaration : include\internal\cef_types.h:347</i> */
		public static final int TID_IO = 6;
		/** <i>native declaration : include\internal\cef_types.h:348</i> */
		public static final int TID_RENDERER = 7;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:360</i><br>
	 * enum values
	 */
	public static interface cef_value_type_t {
		/** <i>native declaration : include\internal\cef_types.h:351</i> */
		public static final int VTYPE_INVALID = 0;
		/** <i>native declaration : include\internal\cef_types.h:352</i> */
		public static final int VTYPE_NULL = 1;
		/** <i>native declaration : include\internal\cef_types.h:353</i> */
		public static final int VTYPE_BOOL = 2;
		/** <i>native declaration : include\internal\cef_types.h:354</i> */
		public static final int VTYPE_INT = 3;
		/** <i>native declaration : include\internal\cef_types.h:355</i> */
		public static final int VTYPE_DOUBLE = 4;
		/** <i>native declaration : include\internal\cef_types.h:356</i> */
		public static final int VTYPE_STRING = 5;
		/** <i>native declaration : include\internal\cef_types.h:357</i> */
		public static final int VTYPE_BINARY = 6;
		/** <i>native declaration : include\internal\cef_types.h:358</i> */
		public static final int VTYPE_DICTIONARY = 7;
		/** <i>native declaration : include\internal\cef_types.h:359</i> */
		public static final int VTYPE_LIST = 8;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:365</i><br>
	 * enum values
	 */
	public static interface cef_jsdialog_type_t {
		/** <i>native declaration : include\internal\cef_types.h:362</i> */
		public static final int JSDIALOGTYPE_ALERT = 0;
		/** <i>native declaration : include\internal\cef_types.h:363</i> */
		public static final int JSDIALOGTYPE_CONFIRM = 1;
		/** <i>native declaration : include\internal\cef_types.h:364</i> */
		public static final int JSDIALOGTYPE_PROMPT = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:402</i><br>
	 * enum values
	 */
	public static interface cef_menu_id_t {
		/** <i>native declaration : include\internal\cef_types.h:375</i> */
		public static final int MENU_ID_BACK = 100;
		/** <i>native declaration : include\internal\cef_types.h:376</i> */
		public static final int MENU_ID_FORWARD = 101;
		/** <i>native declaration : include\internal\cef_types.h:377</i> */
		public static final int MENU_ID_RELOAD = 102;
		/** <i>native declaration : include\internal\cef_types.h:378</i> */
		public static final int MENU_ID_RELOAD_NOCACHE = 103;
		/** <i>native declaration : include\internal\cef_types.h:379</i> */
		public static final int MENU_ID_STOPLOAD = 104;
		/** <i>native declaration : include\internal\cef_types.h:380</i> */
		public static final int MENU_ID_UNDO = 110;
		/** <i>native declaration : include\internal\cef_types.h:381</i> */
		public static final int MENU_ID_REDO = 111;
		/** <i>native declaration : include\internal\cef_types.h:382</i> */
		public static final int MENU_ID_CUT = 112;
		/** <i>native declaration : include\internal\cef_types.h:383</i> */
		public static final int MENU_ID_COPY = 113;
		/** <i>native declaration : include\internal\cef_types.h:384</i> */
		public static final int MENU_ID_PASTE = 114;
		/** <i>native declaration : include\internal\cef_types.h:385</i> */
		public static final int MENU_ID_DELETE = 115;
		/** <i>native declaration : include\internal\cef_types.h:386</i> */
		public static final int MENU_ID_SELECT_ALL = 116;
		/** <i>native declaration : include\internal\cef_types.h:387</i> */
		public static final int MENU_ID_FIND = 130;
		/** <i>native declaration : include\internal\cef_types.h:388</i> */
		public static final int MENU_ID_PRINT = 131;
		/** <i>native declaration : include\internal\cef_types.h:389</i> */
		public static final int MENU_ID_VIEW_SOURCE = 132;
		/** <i>native declaration : include\internal\cef_types.h:390</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_0 = 200;
		/** <i>native declaration : include\internal\cef_types.h:391</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_1 = 201;
		/** <i>native declaration : include\internal\cef_types.h:392</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_2 = 202;
		/** <i>native declaration : include\internal\cef_types.h:393</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_3 = 203;
		/** <i>native declaration : include\internal\cef_types.h:394</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_4 = 204;
		/** <i>native declaration : include\internal\cef_types.h:395</i> */
		public static final int MENU_ID_SPELLCHECK_SUGGESTION_LAST = 204;
		/** <i>native declaration : include\internal\cef_types.h:396</i> */
		public static final int MENU_ID_NO_SPELLING_SUGGESTIONS = 205;
		/** <i>native declaration : include\internal\cef_types.h:397</i> */
		public static final int MENU_ID_ADD_TO_DICTIONARY = 206;
		/** <i>native declaration : include\internal\cef_types.h:398</i> */
		public static final int MENU_ID_CUSTOM_FIRST = 220;
		/** <i>native declaration : include\internal\cef_types.h:399</i> */
		public static final int MENU_ID_CUSTOM_LAST = 250;
		/** <i>native declaration : include\internal\cef_types.h:400</i> */
		public static final int MENU_ID_USER_FIRST = 26500;
		/** <i>native declaration : include\internal\cef_types.h:401</i> */
		public static final int MENU_ID_USER_LAST = 28500;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:407</i><br>
	 * enum values
	 */
	public static interface cef_mouse_button_type_t {
		/** <i>native declaration : include\internal\cef_types.h:404</i> */
		public static final int MBT_LEFT = 0;
		/** <i>native declaration : include\internal\cef_types.h:405</i> */
		public static final int MBT_MIDDLE = 1;
		/** <i>native declaration : include\internal\cef_types.h:406</i> */
		public static final int MBT_RIGHT = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:416</i><br>
	 * enum values
	 */
	public static interface cef_paint_element_type_t {
		/** <i>native declaration : include\internal\cef_types.h:414</i> */
		public static final int PET_VIEW = 0;
		/** <i>native declaration : include\internal\cef_types.h:415</i> */
		public static final int PET_POPUP = 1;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:431</i><br>
	 * enum values
	 */
	public static interface cef_event_flags_t {
		/** <i>native declaration : include\internal\cef_types.h:418</i> */
		public static final int EVENTFLAG_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:419</i> */
		public static final int EVENTFLAG_CAPS_LOCK_ON = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:420</i> */
		public static final int EVENTFLAG_SHIFT_DOWN = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:421</i> */
		public static final int EVENTFLAG_CONTROL_DOWN = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:422</i> */
		public static final int EVENTFLAG_ALT_DOWN = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:423</i> */
		public static final int EVENTFLAG_LEFT_MOUSE_BUTTON = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:424</i> */
		public static final int EVENTFLAG_MIDDLE_MOUSE_BUTTON = 1 << 5;
		/** <i>native declaration : include\internal\cef_types.h:425</i> */
		public static final int EVENTFLAG_RIGHT_MOUSE_BUTTON = 1 << 6;
		/** <i>native declaration : include\internal\cef_types.h:426</i> */
		public static final int EVENTFLAG_COMMAND_DOWN = 1 << 7;
		/** <i>native declaration : include\internal\cef_types.h:427</i> */
		public static final int EVENTFLAG_NUM_LOCK_ON = 1 << 8;
		/** <i>native declaration : include\internal\cef_types.h:428</i> */
		public static final int EVENTFLAG_IS_KEY_PAD = 1 << 9;
		/** <i>native declaration : include\internal\cef_types.h:429</i> */
		public static final int EVENTFLAG_IS_LEFT = 1 << 10;
		/** <i>native declaration : include\internal\cef_types.h:430</i> */
		public static final int EVENTFLAG_IS_RIGHT = 1 << 11;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:439</i><br>
	 * enum values
	 */
	public static interface cef_menu_item_type_t {
		/** <i>native declaration : include\internal\cef_types.h:433</i> */
		public static final int MENUITEMTYPE_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:434</i> */
		public static final int MENUITEMTYPE_COMMAND = 1;
		/** <i>native declaration : include\internal\cef_types.h:435</i> */
		public static final int MENUITEMTYPE_CHECK = 2;
		/** <i>native declaration : include\internal\cef_types.h:436</i> */
		public static final int MENUITEMTYPE_RADIO = 3;
		/** <i>native declaration : include\internal\cef_types.h:437</i> */
		public static final int MENUITEMTYPE_SEPARATOR = 4;
		/** <i>native declaration : include\internal\cef_types.h:438</i> */
		public static final int MENUITEMTYPE_SUBMENU = 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:448</i><br>
	 * enum values
	 */
	public static interface cef_context_menu_type_flags_t {
		/** <i>native declaration : include\internal\cef_types.h:441</i> */
		public static final int CM_TYPEFLAG_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:442</i> */
		public static final int CM_TYPEFLAG_PAGE = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:443</i> */
		public static final int CM_TYPEFLAG_FRAME = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:444</i> */
		public static final int CM_TYPEFLAG_LINK = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:445</i> */
		public static final int CM_TYPEFLAG_MEDIA = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:446</i> */
		public static final int CM_TYPEFLAG_SELECTION = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:447</i> */
		public static final int CM_TYPEFLAG_EDITABLE = 1 << 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:456</i><br>
	 * enum values
	 */
	public static interface cef_context_menu_media_type_t {
		/** <i>native declaration : include\internal\cef_types.h:450</i> */
		public static final int CM_MEDIATYPE_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:451</i> */
		public static final int CM_MEDIATYPE_IMAGE = 1;
		/** <i>native declaration : include\internal\cef_types.h:452</i> */
		public static final int CM_MEDIATYPE_VIDEO = 2;
		/** <i>native declaration : include\internal\cef_types.h:453</i> */
		public static final int CM_MEDIATYPE_AUDIO = 3;
		/** <i>native declaration : include\internal\cef_types.h:454</i> */
		public static final int CM_MEDIATYPE_FILE = 4;
		/** <i>native declaration : include\internal\cef_types.h:455</i> */
		public static final int CM_MEDIATYPE_PLUGIN = 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:469</i><br>
	 * enum values
	 */
	public static interface cef_context_menu_media_state_flags_t {
		/** <i>native declaration : include\internal\cef_types.h:458</i> */
		public static final int CM_MEDIAFLAG_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:459</i> */
		public static final int CM_MEDIAFLAG_ERROR = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:460</i> */
		public static final int CM_MEDIAFLAG_PAUSED = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:461</i> */
		public static final int CM_MEDIAFLAG_MUTED = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:462</i> */
		public static final int CM_MEDIAFLAG_LOOP = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:463</i> */
		public static final int CM_MEDIAFLAG_CAN_SAVE = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:464</i> */
		public static final int CM_MEDIAFLAG_HAS_AUDIO = 1 << 5;
		/** <i>native declaration : include\internal\cef_types.h:465</i> */
		public static final int CM_MEDIAFLAG_HAS_VIDEO = 1 << 6;
		/** <i>native declaration : include\internal\cef_types.h:466</i> */
		public static final int CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT = 1 << 7;
		/** <i>native declaration : include\internal\cef_types.h:467</i> */
		public static final int CM_MEDIAFLAG_CAN_PRINT = 1 << 8;
		/** <i>native declaration : include\internal\cef_types.h:468</i> */
		public static final int CM_MEDIAFLAG_CAN_ROTATE = 1 << 9;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:480</i><br>
	 * enum values
	 */
	public static interface cef_context_menu_edit_state_flags_t {
		/** <i>native declaration : include\internal\cef_types.h:471</i> */
		public static final int CM_EDITFLAG_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:472</i> */
		public static final int CM_EDITFLAG_CAN_UNDO = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:473</i> */
		public static final int CM_EDITFLAG_CAN_REDO = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:474</i> */
		public static final int CM_EDITFLAG_CAN_CUT = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:475</i> */
		public static final int CM_EDITFLAG_CAN_COPY = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:476</i> */
		public static final int CM_EDITFLAG_CAN_PASTE = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:477</i> */
		public static final int CM_EDITFLAG_CAN_DELETE = 1 << 5;
		/** <i>native declaration : include\internal\cef_types.h:478</i> */
		public static final int CM_EDITFLAG_CAN_SELECT_ALL = 1 << 6;
		/** <i>native declaration : include\internal\cef_types.h:479</i> */
		public static final int CM_EDITFLAG_CAN_TRANSLATE = 1 << 7;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:486</i><br>
	 * enum values
	 */
	public static interface cef_key_event_type_t {
		/** <i>native declaration : include\internal\cef_types.h:482</i> */
		public static final int KEYEVENT_RAWKEYDOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:483</i> */
		public static final int KEYEVENT_KEYDOWN = 1;
		/** <i>native declaration : include\internal\cef_types.h:484</i> */
		public static final int KEYEVENT_KEYUP = 2;
		/** <i>native declaration : include\internal\cef_types.h:485</i> */
		public static final int KEYEVENT_CHAR = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:500</i><br>
	 * enum values
	 */
	public static interface cef_focus_source_t {
		/** <i>native declaration : include\internal\cef_types.h:498</i> */
		public static final int FOCUS_SOURCE_NAVIGATION = 0;
		/** <i>native declaration : include\internal\cef_types.h:499</i> */
		public static final int FOCUS_SOURCE_SYSTEM = 1;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:508</i><br>
	 * enum values
	 */
	public static interface cef_navigation_type_t {
		/** <i>native declaration : include\internal\cef_types.h:502</i> */
		public static final int NAVIGATION_LINK_CLICKED = 0;
		/** <i>native declaration : include\internal\cef_types.h:503</i> */
		public static final int NAVIGATION_FORM_SUBMITTED = 1;
		/** <i>native declaration : include\internal\cef_types.h:504</i> */
		public static final int NAVIGATION_BACK_FORWARD = 2;
		/** <i>native declaration : include\internal\cef_types.h:505</i> */
		public static final int NAVIGATION_RELOAD = 3;
		/** <i>native declaration : include\internal\cef_types.h:506</i> */
		public static final int NAVIGATION_FORM_RESUBMITTED = 4;
		/** <i>native declaration : include\internal\cef_types.h:507</i> */
		public static final int NAVIGATION_OTHER = 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:515</i><br>
	 * enum values
	 */
	public static interface cef_xml_encoding_type_t {
		/** <i>native declaration : include\internal\cef_types.h:510</i> */
		public static final int XML_ENCODING_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:511</i> */
		public static final int XML_ENCODING_UTF8 = 1;
		/** <i>native declaration : include\internal\cef_types.h:512</i> */
		public static final int XML_ENCODING_UTF16LE = 2;
		/** <i>native declaration : include\internal\cef_types.h:513</i> */
		public static final int XML_ENCODING_UTF16BE = 3;
		/** <i>native declaration : include\internal\cef_types.h:514</i> */
		public static final int XML_ENCODING_ASCII = 4;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:528</i><br>
	 * enum values
	 */
	public static interface cef_xml_node_type_t {
		/** <i>native declaration : include\internal\cef_types.h:517</i> */
		public static final int XML_NODE_UNSUPPORTED = 0;
		/** <i>native declaration : include\internal\cef_types.h:518</i> */
		public static final int XML_NODE_PROCESSING_INSTRUCTION = 1;
		/** <i>native declaration : include\internal\cef_types.h:519</i> */
		public static final int XML_NODE_DOCUMENT_TYPE = 2;
		/** <i>native declaration : include\internal\cef_types.h:520</i> */
		public static final int XML_NODE_ELEMENT_START = 3;
		/** <i>native declaration : include\internal\cef_types.h:521</i> */
		public static final int XML_NODE_ELEMENT_END = 4;
		/** <i>native declaration : include\internal\cef_types.h:522</i> */
		public static final int XML_NODE_ATTRIBUTE = 5;
		/** <i>native declaration : include\internal\cef_types.h:523</i> */
		public static final int XML_NODE_TEXT = 6;
		/** <i>native declaration : include\internal\cef_types.h:524</i> */
		public static final int XML_NODE_CDATA = 7;
		/** <i>native declaration : include\internal\cef_types.h:525</i> */
		public static final int XML_NODE_ENTITY_REFERENCE = 8;
		/** <i>native declaration : include\internal\cef_types.h:526</i> */
		public static final int XML_NODE_WHITESPACE = 9;
		/** <i>native declaration : include\internal\cef_types.h:527</i> */
		public static final int XML_NODE_COMMENT = 10;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:553</i><br>
	 * enum values
	 */
	public static interface cef_dom_document_type_t {
		/** <i>native declaration : include\internal\cef_types.h:549</i> */
		public static final int DOM_DOCUMENT_TYPE_UNKNOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:550</i> */
		public static final int DOM_DOCUMENT_TYPE_HTML = 1;
		/** <i>native declaration : include\internal\cef_types.h:551</i> */
		public static final int DOM_DOCUMENT_TYPE_XHTML = 2;
		/** <i>native declaration : include\internal\cef_types.h:552</i> */
		public static final int DOM_DOCUMENT_TYPE_PLUGIN = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:572</i><br>
	 * enum values
	 */
	public static interface cef_dom_event_category_t {
		/** <i>native declaration : include\internal\cef_types.h:555</i> */
		public static final int DOM_EVENT_CATEGORY_UNKNOWN = 0x0;
		/** <i>native declaration : include\internal\cef_types.h:556</i> */
		public static final int DOM_EVENT_CATEGORY_UI = 0x1;
		/** <i>native declaration : include\internal\cef_types.h:557</i> */
		public static final int DOM_EVENT_CATEGORY_MOUSE = 0x2;
		/** <i>native declaration : include\internal\cef_types.h:558</i> */
		public static final int DOM_EVENT_CATEGORY_MUTATION = 0x4;
		/** <i>native declaration : include\internal\cef_types.h:559</i> */
		public static final int DOM_EVENT_CATEGORY_KEYBOARD = 0x8;
		/** <i>native declaration : include\internal\cef_types.h:560</i> */
		public static final int DOM_EVENT_CATEGORY_TEXT = 0x10;
		/** <i>native declaration : include\internal\cef_types.h:561</i> */
		public static final int DOM_EVENT_CATEGORY_COMPOSITION = 0x20;
		/** <i>native declaration : include\internal\cef_types.h:562</i> */
		public static final int DOM_EVENT_CATEGORY_DRAG = 0x40;
		/** <i>native declaration : include\internal\cef_types.h:563</i> */
		public static final int DOM_EVENT_CATEGORY_CLIPBOARD = 0x80;
		/** <i>native declaration : include\internal\cef_types.h:564</i> */
		public static final int DOM_EVENT_CATEGORY_MESSAGE = 0x100;
		/** <i>native declaration : include\internal\cef_types.h:565</i> */
		public static final int DOM_EVENT_CATEGORY_WHEEL = 0x200;
		/** <i>native declaration : include\internal\cef_types.h:566</i> */
		public static final int DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED = 0x400;
		/** <i>native declaration : include\internal\cef_types.h:567</i> */
		public static final int DOM_EVENT_CATEGORY_OVERFLOW = 0x800;
		/** <i>native declaration : include\internal\cef_types.h:568</i> */
		public static final int DOM_EVENT_CATEGORY_PAGE_TRANSITION = 0x1000;
		/** <i>native declaration : include\internal\cef_types.h:569</i> */
		public static final int DOM_EVENT_CATEGORY_POPSTATE = 0x2000;
		/** <i>native declaration : include\internal\cef_types.h:570</i> */
		public static final int DOM_EVENT_CATEGORY_PROGRESS = 0x4000;
		/** <i>native declaration : include\internal\cef_types.h:571</i> */
		public static final int DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS = 0x8000;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:578</i><br>
	 * enum values
	 */
	public static interface cef_dom_event_phase_t {
		/** <i>native declaration : include\internal\cef_types.h:574</i> */
		public static final int DOM_EVENT_PHASE_UNKNOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:575</i> */
		public static final int DOM_EVENT_PHASE_CAPTURING = 1;
		/** <i>native declaration : include\internal\cef_types.h:576</i> */
		public static final int DOM_EVENT_PHASE_AT_TARGET = 2;
		/** <i>native declaration : include\internal\cef_types.h:577</i> */
		public static final int DOM_EVENT_PHASE_BUBBLING = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:590</i><br>
	 * enum values
	 */
	public static interface cef_dom_node_type_t {
		/** <i>native declaration : include\internal\cef_types.h:580</i> */
		public static final int DOM_NODE_TYPE_UNSUPPORTED = 0;
		/** <i>native declaration : include\internal\cef_types.h:581</i> */
		public static final int DOM_NODE_TYPE_ELEMENT = 1;
		/** <i>native declaration : include\internal\cef_types.h:582</i> */
		public static final int DOM_NODE_TYPE_ATTRIBUTE = 2;
		/** <i>native declaration : include\internal\cef_types.h:583</i> */
		public static final int DOM_NODE_TYPE_TEXT = 3;
		/** <i>native declaration : include\internal\cef_types.h:584</i> */
		public static final int DOM_NODE_TYPE_CDATA_SECTION = 4;
		/** <i>native declaration : include\internal\cef_types.h:585</i> */
		public static final int DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS = 5;
		/** <i>native declaration : include\internal\cef_types.h:586</i> */
		public static final int DOM_NODE_TYPE_COMMENT = 6;
		/** <i>native declaration : include\internal\cef_types.h:587</i> */
		public static final int DOM_NODE_TYPE_DOCUMENT = 7;
		/** <i>native declaration : include\internal\cef_types.h:588</i> */
		public static final int DOM_NODE_TYPE_DOCUMENT_TYPE = 8;
		/** <i>native declaration : include\internal\cef_types.h:589</i> */
		public static final int DOM_NODE_TYPE_DOCUMENT_FRAGMENT = 9;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:599</i><br>
	 * enum values
	 */
	public static interface cef_file_dialog_mode_t {
		/** <i>native declaration : include\internal\cef_types.h:592</i> */
		public static final int FILE_DIALOG_OPEN = 0;
		/** <i>native declaration : include\internal\cef_types.h:593</i> */
		public static final int FILE_DIALOG_OPEN_MULTIPLE = 1;
		/** <i>native declaration : include\internal\cef_types.h:594</i> */
		public static final int FILE_DIALOG_OPEN_FOLDER = 2;
		/** <i>native declaration : include\internal\cef_types.h:595</i> */
		public static final int FILE_DIALOG_SAVE = 3;
		/** <i>native declaration : include\internal\cef_types.h:596</i> */
		public static final int FILE_DIALOG_TYPE_MASK = 0xFF;
		/** <i>native declaration : include\internal\cef_types.h:597</i> */
		public static final int FILE_DIALOG_OVERWRITEPROMPT_FLAG = 0x01000000;
		/** <i>native declaration : include\internal\cef_types.h:598</i> */
		public static final int FILE_DIALOG_HIDEREADONLY_FLAG = 0x02000000;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:605</i><br>
	 * enum values
	 */
	public static interface cef_geoposition_error_code_t {
		/** <i>native declaration : include\internal\cef_types.h:601</i> */
		public static final int GEOPOSITON_ERROR_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:602</i> */
		public static final int GEOPOSITON_ERROR_PERMISSION_DENIED = 1;
		/** <i>native declaration : include\internal\cef_types.h:603</i> */
		public static final int GEOPOSITON_ERROR_POSITION_UNAVAILABLE = 2;
		/** <i>native declaration : include\internal\cef_types.h:604</i> */
		public static final int GEOPOSITON_ERROR_TIMEOUT = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:650</i><br>
	 * enum values
	 */
	public static interface cef_color_model_t {
		/** <i>native declaration : include\internal\cef_types.h:619</i> */
		public static final int COLOR_MODEL_UNKNOWN = 0;
		/** <i>native declaration : include\internal\cef_types.h:620</i> */
		public static final int COLOR_MODEL_GRAY = 1;
		/** <i>native declaration : include\internal\cef_types.h:621</i> */
		public static final int COLOR_MODEL_COLOR = 2;
		/** <i>native declaration : include\internal\cef_types.h:622</i> */
		public static final int COLOR_MODEL_CMYK = 3;
		/** <i>native declaration : include\internal\cef_types.h:623</i> */
		public static final int COLOR_MODEL_CMY = 4;
		/** <i>native declaration : include\internal\cef_types.h:624</i> */
		public static final int COLOR_MODEL_KCMY = 5;
		/**
		 * CMY_K represents CMY+K.<br>
		 * <i>native declaration : include\internal\cef_types.h:626</i>
		 */
		public static final int COLOR_MODEL_CMY_K = 6;
		/** <i>native declaration : include\internal\cef_types.h:627</i> */
		public static final int COLOR_MODEL_BLACK = 7;
		/** <i>native declaration : include\internal\cef_types.h:628</i> */
		public static final int COLOR_MODEL_GRAYSCALE = 8;
		/** <i>native declaration : include\internal\cef_types.h:629</i> */
		public static final int COLOR_MODEL_RGB = 9;
		/** <i>native declaration : include\internal\cef_types.h:630</i> */
		public static final int COLOR_MODEL_RGB16 = 10;
		/** <i>native declaration : include\internal\cef_types.h:631</i> */
		public static final int COLOR_MODEL_RGBA = 11;
		/**
		 * Used in samsung printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:633</i>
		 */
		public static final int COLOR_MODEL_COLORMODE_COLOR = 12;
		/**
		 * Used in samsung printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:635</i>
		 */
		public static final int COLOR_MODEL_COLORMODE_MONOCHROME = 13;
		/**
		 * Used in HP color printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:637</i>
		 */
		public static final int COLOR_MODEL_HP_COLOR_COLOR = 14;
		/**
		 * Used in HP color printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:639</i>
		 */
		public static final int COLOR_MODEL_HP_COLOR_BLACK = 15;
		/**
		 * Used in foomatic ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:641</i>
		 */
		public static final int COLOR_MODEL_PRINTOUTMODE_NORMAL = 16;
		/**
		 * Used in foomatic ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:643</i>
		 */
		public static final int COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY = 17;
		/**
		 * Used in canon printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:645</i>
		 */
		public static final int COLOR_MODEL_PROCESSCOLORMODEL_CMYK = 18;
		/**
		 * Used in canon printer ppds.<br>
		 * <i>native declaration : include\internal\cef_types.h:647</i>
		 */
		public static final int COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE = 19;
		/**
		 * Used in canon printer ppds<br>
		 * <i>native declaration : include\internal\cef_types.h:649</i>
		 */
		public static final int COLOR_MODEL_PROCESSCOLORMODEL_RGB = 20;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:656</i><br>
	 * enum values
	 */
	public static interface cef_duplex_mode_t {
		/** <i>native declaration : include\internal\cef_types.h:652</i> */
		public static final int DUPLEX_MODE_UNKNOWN = -1;
		/** <i>native declaration : include\internal\cef_types.h:653</i> */
		public static final int DUPLEX_MODE_SIMPLEX = 0;
		/** <i>native declaration : include\internal\cef_types.h:654</i> */
		public static final int DUPLEX_MODE_LONG_EDGE = 1;
		/** <i>native declaration : include\internal\cef_types.h:655</i> */
		public static final int DUPLEX_MODE_SHORT_EDGE = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:702</i><br>
	 * enum values
	 */
	public static interface cef_cursor_type_t {
		/** <i>native declaration : include\internal\cef_types.h:658</i> */
		public static final int CT_POINTER = 0;
		/** <i>native declaration : include\internal\cef_types.h:659</i> */
		public static final int CT_CROSS = 1;
		/** <i>native declaration : include\internal\cef_types.h:660</i> */
		public static final int CT_HAND = 2;
		/** <i>native declaration : include\internal\cef_types.h:661</i> */
		public static final int CT_IBEAM = 3;
		/** <i>native declaration : include\internal\cef_types.h:662</i> */
		public static final int CT_WAIT = 4;
		/** <i>native declaration : include\internal\cef_types.h:663</i> */
		public static final int CT_HELP = 5;
		/** <i>native declaration : include\internal\cef_types.h:664</i> */
		public static final int CT_EASTRESIZE = 6;
		/** <i>native declaration : include\internal\cef_types.h:665</i> */
		public static final int CT_NORTHRESIZE = 7;
		/** <i>native declaration : include\internal\cef_types.h:666</i> */
		public static final int CT_NORTHEASTRESIZE = 8;
		/** <i>native declaration : include\internal\cef_types.h:667</i> */
		public static final int CT_NORTHWESTRESIZE = 9;
		/** <i>native declaration : include\internal\cef_types.h:668</i> */
		public static final int CT_SOUTHRESIZE = 10;
		/** <i>native declaration : include\internal\cef_types.h:669</i> */
		public static final int CT_SOUTHEASTRESIZE = 11;
		/** <i>native declaration : include\internal\cef_types.h:670</i> */
		public static final int CT_SOUTHWESTRESIZE = 12;
		/** <i>native declaration : include\internal\cef_types.h:671</i> */
		public static final int CT_WESTRESIZE = 13;
		/** <i>native declaration : include\internal\cef_types.h:672</i> */
		public static final int CT_NORTHSOUTHRESIZE = 14;
		/** <i>native declaration : include\internal\cef_types.h:673</i> */
		public static final int CT_EASTWESTRESIZE = 15;
		/** <i>native declaration : include\internal\cef_types.h:674</i> */
		public static final int CT_NORTHEASTSOUTHWESTRESIZE = 16;
		/** <i>native declaration : include\internal\cef_types.h:675</i> */
		public static final int CT_NORTHWESTSOUTHEASTRESIZE = 17;
		/** <i>native declaration : include\internal\cef_types.h:676</i> */
		public static final int CT_COLUMNRESIZE = 18;
		/** <i>native declaration : include\internal\cef_types.h:677</i> */
		public static final int CT_ROWRESIZE = 19;
		/** <i>native declaration : include\internal\cef_types.h:678</i> */
		public static final int CT_MIDDLEPANNING = 20;
		/** <i>native declaration : include\internal\cef_types.h:679</i> */
		public static final int CT_EASTPANNING = 21;
		/** <i>native declaration : include\internal\cef_types.h:680</i> */
		public static final int CT_NORTHPANNING = 22;
		/** <i>native declaration : include\internal\cef_types.h:681</i> */
		public static final int CT_NORTHEASTPANNING = 23;
		/** <i>native declaration : include\internal\cef_types.h:682</i> */
		public static final int CT_NORTHWESTPANNING = 24;
		/** <i>native declaration : include\internal\cef_types.h:683</i> */
		public static final int CT_SOUTHPANNING = 25;
		/** <i>native declaration : include\internal\cef_types.h:684</i> */
		public static final int CT_SOUTHEASTPANNING = 26;
		/** <i>native declaration : include\internal\cef_types.h:685</i> */
		public static final int CT_SOUTHWESTPANNING = 27;
		/** <i>native declaration : include\internal\cef_types.h:686</i> */
		public static final int CT_WESTPANNING = 28;
		/** <i>native declaration : include\internal\cef_types.h:687</i> */
		public static final int CT_MOVE = 29;
		/** <i>native declaration : include\internal\cef_types.h:688</i> */
		public static final int CT_VERTICALTEXT = 30;
		/** <i>native declaration : include\internal\cef_types.h:689</i> */
		public static final int CT_CELL = 31;
		/** <i>native declaration : include\internal\cef_types.h:690</i> */
		public static final int CT_CONTEXTMENU = 32;
		/** <i>native declaration : include\internal\cef_types.h:691</i> */
		public static final int CT_ALIAS = 33;
		/** <i>native declaration : include\internal\cef_types.h:692</i> */
		public static final int CT_PROGRESS = 34;
		/** <i>native declaration : include\internal\cef_types.h:693</i> */
		public static final int CT_NODROP = 35;
		/** <i>native declaration : include\internal\cef_types.h:694</i> */
		public static final int CT_COPY = 36;
		/** <i>native declaration : include\internal\cef_types.h:695</i> */
		public static final int CT_NONE = 37;
		/** <i>native declaration : include\internal\cef_types.h:696</i> */
		public static final int CT_NOTALLOWED = 38;
		/** <i>native declaration : include\internal\cef_types.h:697</i> */
		public static final int CT_ZOOMIN = 39;
		/** <i>native declaration : include\internal\cef_types.h:698</i> */
		public static final int CT_ZOOMOUT = 40;
		/** <i>native declaration : include\internal\cef_types.h:699</i> */
		public static final int CT_GRAB = 41;
		/** <i>native declaration : include\internal\cef_types.h:700</i> */
		public static final int CT_GRABBING = 42;
		/** <i>native declaration : include\internal\cef_types.h:701</i> */
		public static final int CT_CUSTOM = 43;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:717</i><br>
	 * enum values
	 */
	public static interface cef_uri_unescape_rule_t {
		/** <i>native declaration : include\internal\cef_types.h:710</i> */
		public static final int UU_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:711</i> */
		public static final int UU_NORMAL = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:712</i> */
		public static final int UU_SPACES = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:713</i> */
		public static final int UU_PATH_SEPARATORS = 1 << 2;
		/** <i>native declaration : include\internal\cef_types.h:714</i> */
		public static final int UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS = 1 << 3;
		/** <i>native declaration : include\internal\cef_types.h:715</i> */
		public static final int UU_SPOOFING_AND_CONTROL_CHARS = 1 << 4;
		/** <i>native declaration : include\internal\cef_types.h:716</i> */
		public static final int UU_REPLACE_PLUS_WITH_SPACE = 1 << 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:721</i><br>
	 * enum values
	 */
	public static interface cef_json_parser_options_t {
		/** <i>native declaration : include\internal\cef_types.h:719</i> */
		public static final int JSON_PARSER_RFC = 0;
		/** <i>native declaration : include\internal\cef_types.h:720</i> */
		public static final int JSON_PARSER_ALLOW_TRAILING_COMMAS = 1 << 0;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:733</i><br>
	 * enum values
	 */
	public static interface cef_json_parser_error_t {
		/** <i>native declaration : include\internal\cef_types.h:723</i> */
		public static final int JSON_NO_ERROR = 0;
		/** <i>native declaration : include\internal\cef_types.h:724</i> */
		public static final int JSON_INVALID_ESCAPE = 1;
		/** <i>native declaration : include\internal\cef_types.h:725</i> */
		public static final int JSON_SYNTAX_ERROR = 2;
		/** <i>native declaration : include\internal\cef_types.h:726</i> */
		public static final int JSON_UNEXPECTED_TOKEN = 3;
		/** <i>native declaration : include\internal\cef_types.h:727</i> */
		public static final int JSON_TRAILING_COMMA = 4;
		/** <i>native declaration : include\internal\cef_types.h:728</i> */
		public static final int JSON_TOO_MUCH_NESTING = 5;
		/** <i>native declaration : include\internal\cef_types.h:729</i> */
		public static final int JSON_UNEXPECTED_DATA_AFTER_ROOT = 6;
		/** <i>native declaration : include\internal\cef_types.h:730</i> */
		public static final int JSON_UNSUPPORTED_ENCODING = 7;
		/** <i>native declaration : include\internal\cef_types.h:731</i> */
		public static final int JSON_UNQUOTED_DICTIONARY_KEY = 8;
		/** <i>native declaration : include\internal\cef_types.h:732</i> */
		public static final int JSON_PARSE_ERROR_COUNT = 9;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:739</i><br>
	 * enum values
	 */
	public static interface cef_json_writer_options_t {
		/** <i>native declaration : include\internal\cef_types.h:735</i> */
		public static final int JSON_WRITER_DEFAULT = 0;
		/** <i>native declaration : include\internal\cef_types.h:736</i> */
		public static final int JSON_WRITER_OMIT_BINARY_VALUES = 1 << 0;
		/** <i>native declaration : include\internal\cef_types.h:737</i> */
		public static final int JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION = 1 << 1;
		/** <i>native declaration : include\internal\cef_types.h:738</i> */
		public static final int JSON_WRITER_PRETTY_PRINT = 1 << 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:745</i><br>
	 * enum values
	 */
	public static interface cef_pdf_print_margin_type_t {
		/** <i>native declaration : include\internal\cef_types.h:741</i> */
		public static final int PDF_PRINT_MARGIN_DEFAULT = 0;
		/** <i>native declaration : include\internal\cef_types.h:742</i> */
		public static final int PDF_PRINT_MARGIN_NONE = 1;
		/** <i>native declaration : include\internal\cef_types.h:743</i> */
		public static final int PDF_PRINT_MARGIN_MINIMUM = 2;
		/** <i>native declaration : include\internal\cef_types.h:744</i> */
		public static final int PDF_PRINT_MARGIN_CUSTOM = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:772</i><br>
	 * enum values
	 */
	public static interface cef_scale_factor_t {
		/** <i>native declaration : include\internal\cef_types.h:762</i> */
		public static final int SCALE_FACTOR_NONE = 0;
		/** <i>native declaration : include\internal\cef_types.h:763</i> */
		public static final int SCALE_FACTOR_100P = 1;
		/** <i>native declaration : include\internal\cef_types.h:764</i> */
		public static final int SCALE_FACTOR_125P = 2;
		/** <i>native declaration : include\internal\cef_types.h:765</i> */
		public static final int SCALE_FACTOR_133P = 3;
		/** <i>native declaration : include\internal\cef_types.h:766</i> */
		public static final int SCALE_FACTOR_140P = 4;
		/** <i>native declaration : include\internal\cef_types.h:767</i> */
		public static final int SCALE_FACTOR_150P = 5;
		/** <i>native declaration : include\internal\cef_types.h:768</i> */
		public static final int SCALE_FACTOR_180P = 6;
		/** <i>native declaration : include\internal\cef_types.h:769</i> */
		public static final int SCALE_FACTOR_200P = 7;
		/** <i>native declaration : include\internal\cef_types.h:770</i> */
		public static final int SCALE_FACTOR_250P = 8;
		/** <i>native declaration : include\internal\cef_types.h:771</i> */
		public static final int SCALE_FACTOR_300P = 9;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:778</i><br>
	 * enum values
	 */
	public static interface cef_plugin_policy_t {
		/** <i>native declaration : include\internal\cef_types.h:774</i> */
		public static final int PLUGIN_POLICY_ALLOW = 0;
		/** <i>native declaration : include\internal\cef_types.h:775</i> */
		public static final int PLUGIN_POLICY_DETECT_IMPORTANT = 1;
		/** <i>native declaration : include\internal\cef_types.h:776</i> */
		public static final int PLUGIN_POLICY_BLOCK = 2;
		/** <i>native declaration : include\internal\cef_types.h:777</i> */
		public static final int PLUGIN_POLICY_DISABLE = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:786</i><br>
	 * enum values
	 */
	public static interface cef_referrer_policy_t {
		/** <i>native declaration : include\internal\cef_types.h:780</i> */
		public static final int REFERRER_POLICY_ALWAYS = 0;
		/** <i>native declaration : include\internal\cef_types.h:781</i> */
		public static final int REFERRER_POLICY_DEFAULT = 1;
		/** <i>native declaration : include\internal\cef_types.h:782</i> */
		public static final int REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE = 2;
		/** <i>native declaration : include\internal\cef_types.h:783</i> */
		public static final int REFERRER_POLICY_NEVER = 3;
		/** <i>native declaration : include\internal\cef_types.h:784</i> */
		public static final int REFERRER_POLICY_ORIGIN = 4;
		/** <i>native declaration : include\internal\cef_types.h:785</i> */
		public static final int REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN = 5;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:791</i><br>
	 * enum values
	 */
	public static interface cef_response_filter_status_t {
		/** <i>native declaration : include\internal\cef_types.h:788</i> */
		public static final int RESPONSE_FILTER_NEED_MORE_DATA = 0;
		/** <i>native declaration : include\internal\cef_types.h:789</i> */
		public static final int RESPONSE_FILTER_DONE = 1;
		/** <i>native declaration : include\internal\cef_types.h:790</i> */
		public static final int RESPONSE_FILTER_ERROR = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:795</i><br>
	 * enum values
	 */
	public static interface cef_color_type_t {
		/** <i>native declaration : include\internal\cef_types.h:793</i> */
		public static final int CEF_COLOR_TYPE_RGBA_8888 = 0;
		/** <i>native declaration : include\internal\cef_types.h:794</i> */
		public static final int CEF_COLOR_TYPE_BGRA_8888 = 1;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:800</i><br>
	 * enum values
	 */
	public static interface cef_alpha_type_t {
		/** <i>native declaration : include\internal\cef_types.h:797</i> */
		public static final int CEF_ALPHA_TYPE_OPAQUE = 0;
		/** <i>native declaration : include\internal\cef_types.h:798</i> */
		public static final int CEF_ALPHA_TYPE_PREMULTIPLIED = 1;
		/** <i>native declaration : include\internal\cef_types.h:799</i> */
		public static final int CEF_ALPHA_TYPE_POSTMULTIPLIED = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:807</i><br>
	 * enum values
	 */
	public static interface cef_text_style_t {
		/** <i>native declaration : include\internal\cef_types.h:802</i> */
		public static final int CEF_TEXT_STYLE_BOLD = 0;
		/** <i>native declaration : include\internal\cef_types.h:803</i> */
		public static final int CEF_TEXT_STYLE_ITALIC = 1;
		/** <i>native declaration : include\internal\cef_types.h:804</i> */
		public static final int CEF_TEXT_STYLE_STRIKE = 2;
		/** <i>native declaration : include\internal\cef_types.h:805</i> */
		public static final int CEF_TEXT_STYLE_DIAGONAL_STRIKE = 3;
		/** <i>native declaration : include\internal\cef_types.h:806</i> */
		public static final int CEF_TEXT_STYLE_UNDERLINE = 4;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:812</i><br>
	 * enum values
	 */
	public static interface cef_main_axis_alignment_t {
		/** <i>native declaration : include\internal\cef_types.h:809</i> */
		public static final int CEF_MAIN_AXIS_ALIGNMENT_START = 0;
		/** <i>native declaration : include\internal\cef_types.h:810</i> */
		public static final int CEF_MAIN_AXIS_ALIGNMENT_CENTER = 1;
		/** <i>native declaration : include\internal\cef_types.h:811</i> */
		public static final int CEF_MAIN_AXIS_ALIGNMENT_END = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:818</i><br>
	 * enum values
	 */
	public static interface cef_cross_axis_alignment_t {
		/** <i>native declaration : include\internal\cef_types.h:814</i> */
		public static final int CEF_CROSS_AXIS_ALIGNMENT_STRETCH = 0;
		/** <i>native declaration : include\internal\cef_types.h:815</i> */
		public static final int CEF_CROSS_AXIS_ALIGNMENT_START = 1;
		/** <i>native declaration : include\internal\cef_types.h:816</i> */
		public static final int CEF_CROSS_AXIS_ALIGNMENT_CENTER = 2;
		/** <i>native declaration : include\internal\cef_types.h:817</i> */
		public static final int CEF_CROSS_AXIS_ALIGNMENT_END = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:835</i><br>
	 * enum values
	 */
	public static interface cef_button_state_t {
		/** <i>native declaration : include\internal\cef_types.h:831</i> */
		public static final int CEF_BUTTON_STATE_NORMAL = 0;
		/** <i>native declaration : include\internal\cef_types.h:832</i> */
		public static final int CEF_BUTTON_STATE_HOVERED = 1;
		/** <i>native declaration : include\internal\cef_types.h:833</i> */
		public static final int CEF_BUTTON_STATE_PRESSED = 2;
		/** <i>native declaration : include\internal\cef_types.h:834</i> */
		public static final int CEF_BUTTON_STATE_DISABLED = 3;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:840</i><br>
	 * enum values
	 */
	public static interface cef_horizontal_alignment_t {
		/** <i>native declaration : include\internal\cef_types.h:837</i> */
		public static final int CEF_HORIZONTAL_ALIGNMENT_LEFT = 0;
		/** <i>native declaration : include\internal\cef_types.h:838</i> */
		public static final int CEF_HORIZONTAL_ALIGNMENT_CENTER = 1;
		/** <i>native declaration : include\internal\cef_types.h:839</i> */
		public static final int CEF_HORIZONTAL_ALIGNMENT_RIGHT = 2;
	};
	/**
	 * <i>native declaration : include\internal\cef_types.h:845</i><br>
	 * enum values
	 */
	public static interface cef_menu_anchor_position_t {
		/** <i>native declaration : include\internal\cef_types.h:842</i> */
		public static final int CEF_MENU_ANCHOR_TOPLEFT = 0;
		/** <i>native declaration : include\internal\cef_types.h:843</i> */
		public static final int CEF_MENU_ANCHOR_TOPRIGHT = 1;
		/** <i>native declaration : include\internal\cef_types.h:844</i> */
		public static final int CEF_MENU_ANCHOR_BOTTOMCENTER = 2;
	};
	/** <i>native declaration : include\internal\cef_string.h</i> */
	public static final int CEF_STRING_TYPE_UTF16 = (int)1;
	/** <i>native declaration : include\capi\cef_command_line_capi.h:3</i> */
	public interface is_valid_callback extends Callback {
		int apply(CefLibrary._cef_command_line_t self);
	};
	/** <i>native declaration : include\capi\cef_command_line_capi.h:4</i> */
	public interface is_read_only_callback extends Callback {
		int apply(CefLibrary._cef_command_line_t self);
	};
	/** <i>native declaration : include\capi\cef_frame_capi.h:7</i> */
	public interface is_valid_callback2 extends Callback {
		int apply(CefLibrary._cef_frame_t self);
	};
	/** <i>native declaration : include\capi\cef_frame_capi.h:8</i> */
	public interface undo_callback extends Callback {
		void apply(CefLibrary._cef_frame_t self);
	};
	/** <i>native declaration : include\capi\cef_frame_capi.h:9</i> */
	public interface redo_callback extends Callback {
		void apply(CefLibrary._cef_frame_t self);
	};
	/** <i>native declaration : include\capi\cef_frame_capi.h:10</i> */
	public interface cut_callback extends Callback {
		void apply(CefLibrary._cef_frame_t self);
	};
	/** <i>native declaration : include\capi\cef_values_capi.h:9</i> */
	public interface is_valid_callback3 extends Callback {
		int apply(CefLibrary._cef_value_t self);
	};
	/** <i>native declaration : include\capi\cef_values_capi.h:10</i> */
	public interface is_owned_callback extends Callback {
		int apply(CefLibrary._cef_value_t self);
	};
	/** <i>native declaration : include\capi\cef_values_capi.h:11</i> */
	public interface is_read_only_callback2 extends Callback {
		int apply(CefLibrary._cef_value_t self);
	};
	/** <i>native declaration : include\capi\cef_values_capi.h:12</i> */
	public interface is_same_callback extends Callback {
		int apply(CefLibrary._cef_value_t self, CefLibrary._cef_value_t that);
	};
	/** <i>native declaration : include\capi\cef_values_capi.h:13</i> */
	public interface is_equal_callback extends Callback {
		int apply(CefLibrary._cef_value_t self, CefLibrary._cef_value_t that);
	};
	/** <i>native declaration : include\capi\cef_process_message_capi.h:3</i> */
	public interface is_valid_callback4 extends Callback {
		int apply(CefLibrary._cef_process_message_t self);
	};
	/** <i>native declaration : include\capi\cef_process_message_capi.h:4</i> */
	public interface is_read_only_callback3 extends Callback {
		int apply(CefLibrary._cef_process_message_t self);
	};
	/** <i>native declaration : include\capi\cef_print_settings_capi.h:3</i> */
	public interface is_valid_callback5 extends Callback {
		int apply(CefLibrary._cef_print_settings_t self);
	};
	/** <i>native declaration : include\capi\cef_print_settings_capi.h:4</i> */
	public interface is_read_only_callback4 extends Callback {
		int apply(CefLibrary._cef_print_settings_t self);
	};
	/**
	 * Original signature : <code>int cef_string_wide_set(const short*, int, cef_string_wide_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:21</i><br>
	 * @deprecated use the safer methods {@link #cef_string_wide_set(short[], int, cef.cef_string_wide_t, int)} and {@link #cef_string_wide_set(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_wide_t, int)} instead
	 */
	@Deprecated 
	int cef_string_wide_set(ShortByReference src, int src_len, cef_string_wide_t output, int int1);
	/**
	 * Original signature : <code>int cef_string_wide_set(const short*, int, cef_string_wide_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:21</i>
	 */
	int cef_string_wide_set(short src[], int src_len, cef_string_wide_t output, int int1);
	/**
	 * Original signature : <code>int cef_string_utf8_set(const char*, int, cef_string_utf8_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:23</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf8_set(java.lang.String, int, cef.cef_string_utf8_t, int)} and {@link #cef_string_utf8_set(com.sun.jna.Pointer, int, cef.cef_string_utf8_t, int)} instead
	 */
	@Deprecated 
	int cef_string_utf8_set(Pointer src, int src_len, cef_string_utf8_t output, int int1);
	/**
	 * Original signature : <code>int cef_string_utf8_set(const char*, int, cef_string_utf8_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:23</i>
	 */
	int cef_string_utf8_set(String src, int src_len, cef_string_utf8_t output, int int1);
	/**
	 * Original signature : <code>int cef_string_utf16_set(const short*, int, cef_string_utf16_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:25</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf16_set(short[], int, cef.cef_string_utf16_t, int)} and {@link #cef_string_utf16_set(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_utf16_t, int)} instead
	 */
	@Deprecated 
	int cef_string_utf16_set(ShortByReference src, int src_len, cef_string_utf16_t output, int int1);
	/**
	 * Original signature : <code>int cef_string_utf16_set(const short*, int, cef_string_utf16_t*, copy int)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:25</i>
	 */
	int cef_string_utf16_set(short src[], int src_len, cef_string_utf16_t output, int int1);
	/**
	 * Original signature : <code>void cef_string_wide_clear(cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:27</i>
	 */
	void cef_string_wide_clear(cef_string_wide_t str);
	/**
	 * Original signature : <code>void cef_string_utf8_clear(cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:29</i>
	 */
	void cef_string_utf8_clear(cef_string_utf8_t str);
	/**
	 * Original signature : <code>void cef_string_utf16_clear(cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:31</i>
	 */
	void cef_string_utf16_clear(cef_string_utf16_t str);
	/**
	 * Original signature : <code>int cef_string_wide_cmp(const cef_string_wide_t*, const cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:33</i>
	 */
	int cef_string_wide_cmp(cef_string_wide_t str1, cef_string_wide_t str2);
	/**
	 * Original signature : <code>int cef_string_utf8_cmp(const cef_string_utf8_t*, const cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:35</i>
	 */
	int cef_string_utf8_cmp(cef_string_utf8_t str1, cef_string_utf8_t str2);
	/**
	 * Original signature : <code>int cef_string_utf16_cmp(const cef_string_utf16_t*, const cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:37</i>
	 */
	int cef_string_utf16_cmp(cef_string_utf16_t str1, cef_string_utf16_t str2);
	/**
	 * Original signature : <code>int cef_string_wide_to_utf8(const short*, int, cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:39</i><br>
	 * @deprecated use the safer methods {@link #cef_string_wide_to_utf8(short[], int, cef.cef_string_utf8_t)} and {@link #cef_string_wide_to_utf8(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_utf8_t)} instead
	 */
	@Deprecated 
	int cef_string_wide_to_utf8(ShortByReference src, int src_len, cef_string_utf8_t output);
	/**
	 * Original signature : <code>int cef_string_wide_to_utf8(const short*, int, cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:39</i>
	 */
	int cef_string_wide_to_utf8(short src[], int src_len, cef_string_utf8_t output);
	/**
	 * Original signature : <code>int cef_string_utf8_to_wide(const char*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:41</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf8_to_wide(java.lang.String, int, cef.cef_string_wide_t)} and {@link #cef_string_utf8_to_wide(com.sun.jna.Pointer, int, cef.cef_string_wide_t)} instead
	 */
	@Deprecated 
	int cef_string_utf8_to_wide(Pointer src, int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_utf8_to_wide(const char*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:41</i>
	 */
	int cef_string_utf8_to_wide(String src, int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_wide_to_utf16(const short*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:43</i><br>
	 * @deprecated use the safer methods {@link #cef_string_wide_to_utf16(short[], int, cef.cef_string_utf16_t)} and {@link #cef_string_wide_to_utf16(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_utf16_t)} instead
	 */
	@Deprecated 
	int cef_string_wide_to_utf16(ShortByReference src, int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>int cef_string_wide_to_utf16(const short*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:43</i>
	 */
	int cef_string_wide_to_utf16(short src[], int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>int cef_string_utf16_to_wide(const short*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:45</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf16_to_wide(short[], int, cef.cef_string_wide_t)} and {@link #cef_string_utf16_to_wide(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_wide_t)} instead
	 */
	@Deprecated 
	int cef_string_utf16_to_wide(ShortByReference src, int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_utf16_to_wide(const short*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:45</i>
	 */
	int cef_string_utf16_to_wide(short src[], int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_utf8_to_utf16(const char*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:47</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf8_to_utf16(java.lang.String, int, cef.cef_string_utf16_t)} and {@link #cef_string_utf8_to_utf16(com.sun.jna.Pointer, int, cef.cef_string_utf16_t)} instead
	 */
	@Deprecated 
	int cef_string_utf8_to_utf16(Pointer src, int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>int cef_string_utf8_to_utf16(const char*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:47</i>
	 */
	int cef_string_utf8_to_utf16(String src, int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>int cef_string_utf16_to_utf8(const short*, int, cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:49</i><br>
	 * @deprecated use the safer methods {@link #cef_string_utf16_to_utf8(short[], int, cef.cef_string_utf8_t)} and {@link #cef_string_utf16_to_utf8(com.sun.jna.ptr.ShortByReference, int, cef.cef_string_utf8_t)} instead
	 */
	@Deprecated 
	int cef_string_utf16_to_utf8(ShortByReference src, int src_len, cef_string_utf8_t output);
	/**
	 * Original signature : <code>int cef_string_utf16_to_utf8(const short*, int, cef_string_utf8_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:49</i>
	 */
	int cef_string_utf16_to_utf8(short src[], int src_len, cef_string_utf8_t output);
	/**
	 * Original signature : <code>int cef_string_ascii_to_wide(const char*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:51</i><br>
	 * @deprecated use the safer methods {@link #cef_string_ascii_to_wide(java.lang.String, int, cef.cef_string_wide_t)} and {@link #cef_string_ascii_to_wide(com.sun.jna.Pointer, int, cef.cef_string_wide_t)} instead
	 */
	@Deprecated 
	int cef_string_ascii_to_wide(Pointer src, int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_ascii_to_wide(const char*, int, cef_string_wide_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:51</i>
	 */
	int cef_string_ascii_to_wide(String src, int src_len, cef_string_wide_t output);
	/**
	 * Original signature : <code>int cef_string_ascii_to_utf16(const char*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:53</i><br>
	 * @deprecated use the safer methods {@link #cef_string_ascii_to_utf16(java.lang.String, int, cef.cef_string_utf16_t)} and {@link #cef_string_ascii_to_utf16(com.sun.jna.Pointer, int, cef.cef_string_utf16_t)} instead
	 */
	@Deprecated 
	int cef_string_ascii_to_utf16(Pointer src, int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>int cef_string_ascii_to_utf16(const char*, int, cef_string_utf16_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:53</i>
	 */
	int cef_string_ascii_to_utf16(String src, int src_len, cef_string_utf16_t output);
	/**
	 * Original signature : <code>cef_string_userfree_wide_t cef_string_userfree_wide_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:58</i>
	 */
	cef_string_wide_t cef_string_userfree_wide_alloc();
	/**
	 * Original signature : <code>cef_string_userfree_utf8_t cef_string_userfree_utf8_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:60</i>
	 */
	cef_string_utf8_t cef_string_userfree_utf8_alloc();
	/**
	 * Original signature : <code>cef_string_userfree_utf16_t cef_string_userfree_utf16_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:62</i>
	 */
	cef_string_utf16_t cef_string_userfree_utf16_alloc();
	/**
	 * Original signature : <code>void cef_string_userfree_wide_free(cef_string_userfree_wide_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:64</i>
	 */
	void cef_string_userfree_wide_free(cef_string_wide_t str);
	/**
	 * Original signature : <code>void cef_string_userfree_utf8_free(cef_string_userfree_utf8_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:66</i>
	 */
	void cef_string_userfree_utf8_free(cef_string_utf8_t str);
	/**
	 * Original signature : <code>void cef_string_userfree_utf16_free(cef_string_userfree_utf16_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_types.h:68</i>
	 */
	void cef_string_userfree_utf16_free(cef_string_utf16_t str);
	/**
	 * Original signature : <code>cef_string_list_t cef_string_list_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:3</i>
	 */
	Pointer cef_string_list_alloc();
	/**
	 * Original signature : <code>int cef_string_list_size(cef_string_list_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:5</i>
	 */
	int cef_string_list_size(Pointer list);
	/**
	 * Original signature : <code>int cef_string_list_value(cef_string_list_t, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:7</i>
	 */
	int cef_string_list_value(Pointer list, int index, cef_string_utf16_t value);
	/**
	 * Original signature : <code>void cef_string_list_append(cef_string_list_t, const cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:9</i>
	 */
	void cef_string_list_append(Pointer list, cef_string_utf16_t value);
	/**
	 * Original signature : <code>void cef_string_list_clear(cef_string_list_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:11</i>
	 */
	void cef_string_list_clear(Pointer list);
	/**
	 * Original signature : <code>void cef_string_list_free(cef_string_list_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:13</i>
	 */
	void cef_string_list_free(Pointer list);
	/**
	 * Original signature : <code>cef_string_list_t cef_string_list_copy(cef_string_list_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_list.h:15</i>
	 */
	Pointer cef_string_list_copy(Pointer list);
	/**
	 * Original signature : <code>cef_string_map_t cef_string_map_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:3</i>
	 */
	Pointer cef_string_map_alloc();
	/**
	 * Original signature : <code>int cef_string_map_size(cef_string_map_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:5</i>
	 */
	int cef_string_map_size(Pointer map);
	/**
	 * Original signature : <code>int cef_string_map_find(cef_string_map_t, const cef_string_t*, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:7</i>
	 */
	int cef_string_map_find(Pointer map, cef_string_utf16_t key, cef_string_utf16_t value);
	/**
	 * Original signature : <code>int cef_string_map_key(cef_string_map_t, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:9</i>
	 */
	int cef_string_map_key(Pointer map, int index, cef_string_utf16_t key);
	/**
	 * Original signature : <code>int cef_string_map_value(cef_string_map_t, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:11</i>
	 */
	int cef_string_map_value(Pointer map, int index, cef_string_utf16_t value);
	/**
	 * Original signature : <code>int cef_string_map_append(cef_string_map_t, const cef_string_t*, const cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:13</i>
	 */
	int cef_string_map_append(Pointer map, cef_string_utf16_t key, cef_string_utf16_t value);
	/**
	 * Original signature : <code>void cef_string_map_clear(cef_string_map_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:15</i>
	 */
	void cef_string_map_clear(Pointer map);
	/**
	 * Original signature : <code>void cef_string_map_free(cef_string_map_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_map.h:17</i>
	 */
	void cef_string_map_free(Pointer map);
	/**
	 * Original signature : <code>cef_string_multimap_t cef_string_multimap_alloc()</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:3</i>
	 */
	Pointer cef_string_multimap_alloc();
	/**
	 * Original signature : <code>int cef_string_multimap_size(cef_string_multimap_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:5</i>
	 */
	int cef_string_multimap_size(Pointer map);
	/**
	 * Original signature : <code>int cef_string_multimap_find_count(cef_string_multimap_t, const cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:7</i>
	 */
	int cef_string_multimap_find_count(Pointer map, cef_string_utf16_t key);
	/**
	 * Original signature : <code>int cef_string_multimap_enumerate(cef_string_multimap_t, const cef_string_t*, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:9</i>
	 */
	int cef_string_multimap_enumerate(Pointer map, cef_string_utf16_t key, int value_index, cef_string_utf16_t value);
	/**
	 * Original signature : <code>int cef_string_multimap_key(cef_string_multimap_t, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:11</i>
	 */
	int cef_string_multimap_key(Pointer map, int index, cef_string_utf16_t key);
	/**
	 * Original signature : <code>int cef_string_multimap_value(cef_string_multimap_t, int, cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:13</i>
	 */
	int cef_string_multimap_value(Pointer map, int index, cef_string_utf16_t value);
	/**
	 * Original signature : <code>int cef_string_multimap_append(cef_string_multimap_t, const cef_string_t*, const cef_string_t*)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:15</i>
	 */
	int cef_string_multimap_append(Pointer map, cef_string_utf16_t key, cef_string_utf16_t value);
	/**
	 * Original signature : <code>void cef_string_multimap_clear(cef_string_multimap_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:17</i>
	 */
	void cef_string_multimap_clear(Pointer map);
	/**
	 * Original signature : <code>void cef_string_multimap_free(cef_string_multimap_t)</code><br>
	 * <i>native declaration : include\internal\cef_string_multimap.h:19</i>
	 */
	void cef_string_multimap_free(Pointer map);
	/**
	 * <i>native declaration : include\internal\cef_time.h:19</i><br>
	 * Conversion Error : time_t* (Primitive without known type for this runtime: NativeTime)
	 */
	/**
	 * <i>native declaration : include\internal\cef_time.h:21</i><br>
	 * Conversion Error : time_t (Primitive without known type for this runtime: NativeTime)
	 */
	/**
	 * Original signature : <code>int cef_time_to_doublet(const cef_time_t*, double*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:23</i><br>
	 * @deprecated use the safer methods {@link #cef_time_to_doublet(cef.cef_time_t, java.nio.DoubleBuffer)} and {@link #cef_time_to_doublet(cef.cef_time_t, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int cef_time_to_doublet(cef_time_t cef_time, DoubleByReference time);
	/**
	 * Original signature : <code>int cef_time_to_doublet(const cef_time_t*, double*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:23</i>
	 */
	int cef_time_to_doublet(cef_time_t cef_time, DoubleBuffer time);
	/**
	 * Original signature : <code>int cef_time_from_doublet(double, cef_time_t*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:25</i>
	 */
	int cef_time_from_doublet(double time, cef_time_t cef_time);
	/**
	 * Original signature : <code>int cef_time_now(cef_time_t*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:27</i>
	 */
	int cef_time_now(cef_time_t cef_time);
	/**
	 * Original signature : <code>int cef_time_delta(const cef_time_t*, const cef_time_t*, long long*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:29</i><br>
	 * @deprecated use the safer methods {@link #cef_time_delta(cef.cef_time_t, cef.cef_time_t, java.nio.LongBuffer)} and {@link #cef_time_delta(cef.cef_time_t, cef.cef_time_t, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int cef_time_delta(cef_time_t cef_time1, cef_time_t cef_time2, LongByReference delta);
	/**
	 * Original signature : <code>int cef_time_delta(const cef_time_t*, const cef_time_t*, long long*)</code><br>
	 * <i>native declaration : include\internal\cef_time.h:29</i>
	 */
	int cef_time_delta(cef_time_t cef_time1, cef_time_t cef_time2, LongBuffer delta);
	/**
	 * Original signature : <code>cef_stream_reader_t* cef_stream_reader_create_for_file(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_stream_capi.h:28</i>
	 */
	cef_stream_reader_t cef_stream_reader_create_for_file(cef_string_utf16_t fileName);
	/**
	 * Original signature : <code>cef_stream_reader_t* cef_stream_reader_create_for_data(void*, int)</code><br>
	 * <i>native declaration : include\capi\cef_stream_capi.h:30</i>
	 */
	cef_stream_reader_t cef_stream_reader_create_for_data(Pointer data, int size);
	/**
	 * Original signature : <code>cef_stream_reader_t* cef_stream_reader_create_for_handler(cef_read_handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_stream_capi.h:32</i>
	 */
	cef_stream_reader_t cef_stream_reader_create_for_handler(cef_read_handler_t handler);
	/**
	 * Original signature : <code>cef_stream_writer_t* cef_stream_writer_create_for_file(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_stream_capi.h:60</i>
	 */
	cef_stream_writer_t cef_stream_writer_create_for_file(cef_string_utf16_t fileName);
	/**
	 * Original signature : <code>cef_stream_writer_t* cef_stream_writer_create_for_handler(cef_write_handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_stream_capi.h:62</i>
	 */
	cef_stream_writer_t cef_stream_writer_create_for_handler(cef_write_handler_t handler);
	/**
	 * Original signature : <code>cef_drag_data_t* cef_drag_data_create()</code><br>
	 * <i>native declaration : include\capi\cef_drag_data_capi.h:56</i>
	 */
	cef_drag_data_t cef_drag_data_create();
	/**
	 * Original signature : <code>cef_request_t* cef_request_create()</code><br>
	 * <i>native declaration : include\capi\cef_request_capi.h:54</i>
	 */
	cef_request_t cef_request_create();
	/**
	 * Original signature : <code>cef_post_data_t* cef_post_data_create()</code><br>
	 * <i>native declaration : include\capi\cef_request_capi.h:73</i>
	 */
	cef_post_data_t cef_post_data_create();
	/**
	 * Original signature : <code>cef_post_data_element_t* cef_post_data_element_create()</code><br>
	 * <i>native declaration : include\capi\cef_request_capi.h:96</i>
	 */
	cef_post_data_element_t cef_post_data_element_create();
	/**
	 * Original signature : <code>cef_image_t* cef_image_create()</code><br>
	 * <i>native declaration : include\capi\cef_image_capi.h:31</i>
	 */
	cef_image_t cef_image_create();
	/**
	 * Original signature : <code>cef_cookie_manager_t* cef_cookie_manager_get_global_manager(_cef_completion_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_cookie_capi.h:22</i>
	 */
	cef_cookie_manager_t cef_cookie_manager_get_global_manager(cef_completion_callback_t callback);
	/**
	 * Original signature : <code>cef_cookie_manager_t* cef_cookie_manager_create_manager(const cef_string_t*, int, _cef_completion_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_cookie_capi.h:24</i>
	 */
	cef_cookie_manager_t cef_cookie_manager_create_manager(cef_string_utf16_t path, int persist_session_cookies, cef_completion_callback_t callback);
	/**
	 * Original signature : <code>void cef_visit_web_plugin_info(cef_web_plugin_info_visitor_t*)</code><br>
	 * <i>native declaration : include\capi\cef_web_plugin_capi.h:28</i>
	 */
	void cef_visit_web_plugin_info(cef_web_plugin_info_visitor_t visitor);
	/**
	 * Original signature : <code>void cef_refresh_web_plugins()</code><br>
	 * <i>native declaration : include\capi\cef_web_plugin_capi.h:30</i>
	 */
	void cef_refresh_web_plugins();
	/**
	 * Original signature : <code>void cef_unregister_internal_web_plugin(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_web_plugin_capi.h:32</i>
	 */
	void cef_unregister_internal_web_plugin(cef_string_utf16_t path);
	/**
	 * Original signature : <code>void cef_register_web_plugin_crash(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_web_plugin_capi.h:34</i>
	 */
	void cef_register_web_plugin_crash(cef_string_utf16_t path);
	/**
	 * Original signature : <code>void cef_is_web_plugin_unstable(const cef_string_t*, cef_web_plugin_unstable_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_web_plugin_capi.h:36</i>
	 */
	void cef_is_web_plugin_unstable(cef_string_utf16_t path, cef_web_plugin_unstable_callback_t callback);
	/**
	 * Original signature : <code>cef_request_context_t* cef_request_context_get_global_context()</code><br>
	 * <i>native declaration : include\capi\cef_request_context_capi.h:49</i>
	 */
	cef_request_context_t cef_request_context_get_global_context();
	/**
	 * Original signature : <code>cef_request_context_t* cef_request_context_create_context(_cef_request_context_settings_t*, _cef_request_context_handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_request_context_capi.h:51</i>
	 */
	cef_request_context_t cef_request_context_create_context(cef_request_context_settings_t settings, cef_request_context_handler_t handler);
	/**
	 * Original signature : <code>cef_request_context_t* cef_create_context_shared(cef_request_context_t*, _cef_request_context_handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_request_context_capi.h:53</i>
	 */
	cef_request_context_t cef_create_context_shared(cef_request_context_t other, cef_request_context_handler_t handler);
	/**
	 * Original signature : <code>int cef_browser_host_create_browser(const cef_window_info_t*, _cef_client_t*, const cef_string_t*, _cef_browser_settings_t*, _cef_request_context_t*)</code><br>
	 * <i>native declaration : include\capi\cef_browser_capi.h:172</i>
	 */
	int cef_browser_host_create_browser(cef_window_info_t windowInfo, cef_client_t client, cef_string_utf16_t url, cef_browser_settings_t settings, cef_request_context_t request_context);
	/**
	 * Original signature : <code>cef_browser_t* cef_browser_host_create_browser_sync(const cef_window_info_t*, _cef_client_t*, const cef_string_t*, _cef_browser_settings_t*, _cef_request_context_t*)</code><br>
	 * <i>native declaration : include\capi\cef_browser_capi.h:174</i>
	 */
	cef_browser_t cef_browser_host_create_browser_sync(cef_window_info_t windowInfo, cef_client_t client, cef_string_utf16_t url, cef_browser_settings_t settings, cef_request_context_t request_context);
	/**
	 * Original signature : <code>cef_task_runner_t* cef_task_runner_get_for_current_thread()</code><br>
	 * <i>native declaration : include\capi\cef_task_capi.h:20</i>
	 */
	cef_task_runner_t cef_task_runner_get_for_current_thread();
	/**
	 * Original signature : <code>cef_task_runner_t* cef_task_runner_get_for_thread(cef_thread_id_t)</code><br>
	 * <i>native declaration : include\capi\cef_task_capi.h:22</i>
	 */
	cef_task_runner_t cef_task_runner_get_for_thread(int threadId);
	/**
	 * Original signature : <code>int cef_currently_on(cef_thread_id_t)</code><br>
	 * <i>native declaration : include\capi\cef_task_capi.h:24</i>
	 */
	int cef_currently_on(int threadId);
	/**
	 * Original signature : <code>int cef_post_task(cef_thread_id_t, cef_task_t*)</code><br>
	 * <i>native declaration : include\capi\cef_task_capi.h:26</i>
	 */
	int cef_post_task(int threadId, cef_task_t task);
	/**
	 * Original signature : <code>int cef_post_delayed_task(cef_thread_id_t, cef_task_t*, int64)</code><br>
	 * <i>native declaration : include\capi\cef_task_capi.h:28</i>
	 */
	int cef_post_delayed_task(int threadId, cef_task_t task, long delay_ms);
	/**
	 * Original signature : <code>cef_v8context_t* cef_v8context_get_current_context()</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:27</i>
	 */
	cef_v8context_t cef_v8context_get_current_context();
	/**
	 * Original signature : <code>cef_v8context_t* cef_v8context_get_entered_context()</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:29</i>
	 */
	cef_v8context_t cef_v8context_get_entered_context();
	/**
	 * Original signature : <code>int cef_v8context_in_context()</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:31</i>
	 */
	int cef_v8context_in_context();
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_undefined()</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:161</i>
	 */
	cef_v8value_t cef_v8value_create_undefined();
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_null()</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:163</i>
	 */
	cef_v8value_t cef_v8value_create_null();
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_bool(int)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:165</i>
	 */
	cef_v8value_t cef_v8value_create_bool(int value);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_int(int32)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:167</i>
	 */
	cef_v8value_t cef_v8value_create_int(int value);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_uint(uint32)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:169</i>
	 */
	cef_v8value_t cef_v8value_create_uint(int value);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_double(double)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:171</i>
	 */
	cef_v8value_t cef_v8value_create_double(double value);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_date(const cef_time_t*)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:173</i>
	 */
	cef_v8value_t cef_v8value_create_date(cef_time_t date);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_string(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:175</i>
	 */
	cef_v8value_t cef_v8value_create_string(cef_string_utf16_t value);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_object(cef_v8accessor_t*)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:177</i>
	 */
	cef_v8value_t cef_v8value_create_object(cef_v8accessor_t accessor);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_array(int)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:179</i>
	 */
	cef_v8value_t cef_v8value_create_array(int length);
	/**
	 * Original signature : <code>cef_v8value_t* cef_v8value_create_function(const cef_string_t*, cef_v8handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:181</i>
	 */
	cef_v8value_t cef_v8value_create_function(cef_string_utf16_t name, cef_v8handler_t handler);
	/**
	 * Original signature : <code>cef_v8stack_trace_t* cef_v8stack_trace_get_current(int)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:192</i>
	 */
	cef_v8stack_trace_t cef_v8stack_trace_get_current(int frame_limit);
	/**
	 * Original signature : <code>int cef_register_extension(const cef_string_t*, const cef_string_t*, cef_v8handler_t*)</code><br>
	 * <i>native declaration : include\capi\cef_v8_capi.h:216</i>
	 */
	int cef_register_extension(cef_string_utf16_t extension_name, cef_string_utf16_t javascript_code, cef_v8handler_t handler);
	/**
	 * Original signature : <code>cef_response_t* cef_response_create()</code><br>
	 * <i>native declaration : include\capi\cef_response_capi.h:33</i>
	 */
	cef_response_t cef_response_create();
	/**
	 * Original signature : <code>int cef_register_scheme_handler_factory(const cef_string_t*, const cef_string_t*, cef_scheme_handler_factory_t*)</code><br>
	 * <i>native declaration : include\capi\cef_scheme_capi.h:13</i>
	 */
	int cef_register_scheme_handler_factory(cef_string_utf16_t scheme_name, cef_string_utf16_t domain_name, cef_scheme_handler_factory_t factory);
	/**
	 * Original signature : <code>int cef_clear_scheme_handler_factories()</code><br>
	 * <i>native declaration : include\capi\cef_scheme_capi.h:15</i>
	 */
	int cef_clear_scheme_handler_factories();
	/**
	 * Original signature : <code>int cef_execute_process(_cef_main_args_t*, cef_app_t*, void*)</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:16</i>
	 */
	int cef_execute_process(cef_main_args_t args, cef_app_t application, Pointer windows_sandbox_info);
	/**
	 * Original signature : <code>int cef_initialize(_cef_main_args_t*, _cef_settings_t*, cef_app_t*, void*)</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:18</i>
	 */
	int cef_initialize(cef_main_args_t args, cef_settings_t settings, cef_app_t application, Pointer windows_sandbox_info);
	/**
	 * Original signature : <code>void cef_shutdown()</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:20</i>
	 */
	void cef_shutdown();
	/**
	 * Original signature : <code>void cef_do_message_loop_work()</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:22</i>
	 */
	void cef_do_message_loop_work();
	/**
	 * Original signature : <code>void cef_run_message_loop()</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:24</i>
	 */
	void cef_run_message_loop();
	/**
	 * Original signature : <code>void cef_quit_message_loop()</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:26</i>
	 */
	void cef_quit_message_loop();
	/**
	 * Original signature : <code>void cef_set_osmodal_loop(int)</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:28</i>
	 */
	void cef_set_osmodal_loop(int osModalLoop);
	/**
	 * Original signature : <code>void cef_enable_highdpi_support()</code><br>
	 * <i>native declaration : include\capi\cef_app_capi.h:30</i>
	 */
	void cef_enable_highdpi_support();
	/**
	 * Original signature : <code>cef_menu_model_t* cef_menu_model_create(_cef_menu_model_delegate_t*)</code><br>
	 * <i>native declaration : include\capi\cef_menu_model_capi.h:107</i>
	 */
	cef_menu_model_t cef_menu_model_create(cef_menu_model_delegate_t delegate);
	/**
	 * Original signature : <code>int cef_get_geolocation(cef_get_geolocation_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_geolocation_capi.h:7</i>
	 */
	int cef_get_geolocation(cef_get_geolocation_callback_t callback);
	/**
	 * Original signature : <code>int cef_add_cross_origin_whitelist_entry(const cef_string_t*, const cef_string_t*, const cef_string_t*, int)</code><br>
	 * <i>native declaration : include\capi\cef_origin_whitelist_capi.h:2</i>
	 */
	int cef_add_cross_origin_whitelist_entry(cef_string_utf16_t source_origin, cef_string_utf16_t target_protocol, cef_string_utf16_t target_domain, int allow_target_subdomains);
	/**
	 * Original signature : <code>int cef_remove_cross_origin_whitelist_entry(const cef_string_t*, const cef_string_t*, const cef_string_t*, int)</code><br>
	 * <i>native declaration : include\capi\cef_origin_whitelist_capi.h:4</i>
	 */
	int cef_remove_cross_origin_whitelist_entry(cef_string_utf16_t source_origin, cef_string_utf16_t target_protocol, cef_string_utf16_t target_domain, int allow_target_subdomains);
	/**
	 * Original signature : <code>int cef_clear_cross_origin_whitelist()</code><br>
	 * <i>native declaration : include\capi\cef_origin_whitelist_capi.h:6</i>
	 */
	int cef_clear_cross_origin_whitelist();
	/**
	 * Original signature : <code>int cef_parse_url(const cef_string_t*, _cef_urlparts_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:2</i>
	 */
	int cef_parse_url(cef_string_utf16_t url, cef_urlparts_t parts);
	/**
	 * Original signature : <code>int cef_create_url(_cef_urlparts_t*, cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:4</i>
	 */
	int cef_create_url(cef_urlparts_t parts, cef_string_utf16_t url);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_format_url_for_security_display(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:9</i>
	 */
	cef_string_utf16_t cef_format_url_for_security_display(cef_string_utf16_t origin_url);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_get_mime_type(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:14</i>
	 */
	cef_string_utf16_t cef_get_mime_type(cef_string_utf16_t extension);
	/**
	 * Original signature : <code>void cef_get_extensions_for_mime_type(const cef_string_t*, cef_string_list_t)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:16</i>
	 */
	void cef_get_extensions_for_mime_type(cef_string_utf16_t mime_type, Pointer extensions);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_base64encode(const void*, int)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:21</i>
	 */
	cef_string_utf16_t cef_base64encode(Pointer data, int data_size);
	/**
	 * Original signature : <code>_cef_binary_value_t* cef_base64decode(const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:23</i>
	 */
	CefLibrary._cef_binary_value_t cef_base64decode(cef_string_utf16_t data);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_uriencode(const cef_string_t*, int)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:28</i>
	 */
	cef_string_utf16_t cef_uriencode(cef_string_utf16_t text, int use_plus);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_uridecode(const cef_string_t*, int, cef_uri_unescape_rule_t)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:33</i>
	 */
	cef_string_utf16_t cef_uridecode(cef_string_utf16_t text, int convert_to_utf8, int unescape_rule);
	/**
	 * Original signature : <code>_cef_value_t* cef_parse_json(const cef_string_t*, cef_json_parser_options_t)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:35</i>
	 */
	CefLibrary._cef_value_t cef_parse_json(cef_string_utf16_t json_string, int options);
	/**
	 * Original signature : <code>_cef_value_t* cef_parse_jsonand_return_error(const cef_string_t*, cef_json_parser_options_t, cef_json_parser_error_t*, cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:37</i><br>
	 * @deprecated use the safer methods {@link #cef_parse_jsonand_return_error(cef.cef_string_utf16_t, int, java.nio.IntBuffer, cef.cef_string_utf16_t)} and {@link #cef_parse_jsonand_return_error(cef.cef_string_utf16_t, int, com.sun.jna.ptr.IntByReference, cef.cef_string_utf16_t)} instead
	 */
	@Deprecated 
	CefLibrary._cef_value_t cef_parse_jsonand_return_error(cef_string_utf16_t json_string, int options, IntByReference error_code_out, cef_string_utf16_t error_msg_out);
	/**
	 * Original signature : <code>_cef_value_t* cef_parse_jsonand_return_error(const cef_string_t*, cef_json_parser_options_t, cef_json_parser_error_t*, cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:37</i>
	 */
	CefLibrary._cef_value_t cef_parse_jsonand_return_error(cef_string_utf16_t json_string, int options, IntBuffer error_code_out, cef_string_utf16_t error_msg_out);
	/**
	 * The resulting string must be freed by calling cef_string_userfree_free().<br>
	 * Original signature : <code>cef_string_userfree_t cef_write_json(_cef_value_t*, cef_json_writer_options_t)</code><br>
	 * <i>native declaration : include\capi\cef_parser_capi.h:42</i>
	 */
	cef_string_utf16_t cef_write_json(CefLibrary._cef_value_t node, int options);
	/**
	 * Original signature : <code>int cef_get_path(cef_path_key_t, cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_path_util_capi.h:2</i>
	 */
	int cef_get_path(int key, cef_string_utf16_t path);
	/**
	 * Original signature : <code>int cef_launch_process(_cef_command_line_t*)</code><br>
	 * <i>native declaration : include\capi\cef_process_util_capi.h:2</i>
	 */
	int cef_launch_process(CefLibrary._cef_command_line_t command_line);
	/**
	 * Original signature : <code>cef_resource_bundle_t* cef_resource_bundle_get_global()</code><br>
	 * <i>native declaration : include\capi\cef_resource_bundle_capi.h:12</i>
	 */
	cef_resource_bundle_t cef_resource_bundle_get_global();
	/**
	 * Original signature : <code>int cef_begin_tracing(const cef_string_t*, _cef_completion_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_trace_capi.h:7</i>
	 */
	int cef_begin_tracing(cef_string_utf16_t categories, cef_completion_callback_t callback);
	/**
	 * Original signature : <code>int cef_end_tracing(const cef_string_t*, cef_end_tracing_callback_t*)</code><br>
	 * <i>native declaration : include\capi\cef_trace_capi.h:9</i>
	 */
	int cef_end_tracing(cef_string_utf16_t tracing_file, cef_end_tracing_callback_t callback);
	/**
	 * Original signature : <code>int64 cef_now_from_system_trace_time()</code><br>
	 * <i>native declaration : include\capi\cef_trace_capi.h:11</i>
	 */
	long cef_now_from_system_trace_time();
	/**
	 * Original signature : <code>cef_urlrequest_t* cef_urlrequest_create(_cef_request_t*, _cef_urlrequest_client_t*, _cef_request_context_t*)</code><br>
	 * <i>native declaration : include\capi\cef_urlrequest_capi.h:20</i>
	 */
	cef_urlrequest_t cef_urlrequest_create(cef_request_t request, cef_urlrequest_client_t client, cef_request_context_t request_context);
	/**
	 * Original signature : <code>cef_xml_reader_t* cef_xml_reader_create(_cef_stream_reader_t*, cef_xml_encoding_type_t, const cef_string_t*)</code><br>
	 * <i>native declaration : include\capi\cef_xml_reader_capi.h:77</i>
	 */
	cef_xml_reader_t cef_xml_reader_create(cef_stream_reader_t stream, int encodingType, cef_string_utf16_t URI);
	/**
	 * Original signature : <code>cef_zip_reader_t* cef_zip_reader_create(_cef_stream_reader_t*)</code><br>
	 * <i>native declaration : include\capi\cef_zip_reader_capi.h:33</i>
	 */
	cef_zip_reader_t cef_zip_reader_create(cef_stream_reader_t stream);
	
	
//	// WINDOWS ONLY
//	// void* cef_sandbox_info_create();
//	Pointer cef_sandbox_info_create(); 
//	
//	//void cef_sandbox_info_destroy(void* sandbox_info);
//	void cef_sandbox_info_destroy(Pointer sandbox_info);

	
	public static class MSG extends PointerType {
		public MSG(Pointer address) {
			super(address);
		}
		public MSG() {
			super();
		}
	};
	public static class _cef_binary_value_t extends PointerType {
		public _cef_binary_value_t(Pointer address) {
			super(address);
		}
		public _cef_binary_value_t() {
			super();
		}
	};
	public static class _cef_list_value_t extends PointerType {
		public _cef_list_value_t(Pointer address) {
			super(address);
		}
		public _cef_list_value_t() {
			super();
		}
	};
	public static class _cef_print_settings_t extends PointerType {
		public _cef_print_settings_t(Pointer address) {
			super(address);
		}
		public _cef_print_settings_t() {
			super();
		}
	};
	public static class _cef_command_line_t extends PointerType {
		public _cef_command_line_t(Pointer address) {
			super(address);
		}
		public _cef_command_line_t() {
			super();
		}
	};
	public static class HINSTANCE extends PointerType {
		public HINSTANCE(Pointer address) {
			super(address);
		}
		public HINSTANCE() {
			super();
		}
	};
	public static class HWND extends PointerType {
		public HWND(Pointer address) {
			super(address);
		}
		public HWND() {
			super();
		}
	};
	public static class _cef_process_message_t extends PointerType {
		public _cef_process_message_t(Pointer address) {
			super(address);
		}
		public _cef_process_message_t() {
			super();
		}
	};
	public static class _cef_dictionary_value_t extends PointerType {
		public _cef_dictionary_value_t(Pointer address) {
			super(address);
		}
		public _cef_dictionary_value_t() {
			super();
		}
	};
	public static class _cef_frame_t extends PointerType {
		public _cef_frame_t(Pointer address) {
			super(address);
		}
		public _cef_frame_t() {
			super();
		}
	};
	public static class _cef_value_t extends PointerType {
		public _cef_value_t(Pointer address) {
			super(address);
		}
		public _cef_value_t() {
			super();
		}
	};
	public static class HCURSOR extends PointerType {
		public HCURSOR(Pointer address) {
			super(address);
		}
		public HCURSOR() {
			super();
		}
	};
	public static class HMENU extends PointerType {
		public HMENU(Pointer address) {
			super(address);
		}
		public HMENU() {
			super();
		}
	};
}
