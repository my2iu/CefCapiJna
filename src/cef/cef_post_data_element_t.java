package cef;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_request_capi.h:94</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_post_data_element_t extends Structure {
	/** C type : cef_base_t */
	public cef_base_t base;
	/** C type : is_read_only_callback* */
	public cef.cef_response_t.is_read_only_callback is_read_only;
	/** C type : set_to_empty_callback* */
	public cef_post_data_element_t.set_to_empty_callback set_to_empty;
	/** C type : set_to_file_callback* */
	public cef_post_data_element_t.set_to_file_callback set_to_file;
	/** C type : set_to_bytes_callback* */
	public cef_post_data_element_t.set_to_bytes_callback set_to_bytes;
	/** C type : get_bytes_count_callback* */
	public cef_post_data_element_t.get_bytes_count_callback get_bytes_count;
	/** C type : get_bytes_callback* */
	public cef_post_data_element_t.get_bytes_callback get_bytes;
	/** <i>native declaration : include\capi\cef_request_capi.h:86</i> */
	public interface is_read_only_callback extends Callback {
		int apply(cef_post_data_element_t self);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:87</i> */
	public interface set_to_empty_callback extends Callback {
		void apply(cef_post_data_element_t self);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:88</i> */
	public interface set_to_file_callback extends Callback {
		void apply(cef_post_data_element_t self, cef_string_utf16_t fileName);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:89</i> */
	public interface set_to_bytes_callback extends Callback {
		void apply(cef_post_data_element_t self, int size, Pointer bytes);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:90</i> */
	public interface cef_postdataelement_type_t_callback extends Callback {
		int apply(cef_post_data_element_t self);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:91</i> */
	public interface cef_string_userfree_t_callback extends Callback {
		int apply(cef_post_data_element_t self);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:92</i> */
	public interface get_bytes_count_callback extends Callback {
		int apply(cef_post_data_element_t self);
	};
	/** <i>native declaration : include\capi\cef_request_capi.h:93</i> */
	public interface get_bytes_callback extends Callback {
		int apply(cef_post_data_element_t self, int size, Pointer bytes);
	};
	public cef_post_data_element_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("base", "is_read_only", "set_to_empty", "set_to_file", "set_to_bytes", "get_bytes_count", "get_bytes");
	}
	/**
	 * @param base C type : cef_base_t<br>
	 * @param is_read_only C type : is_read_only_callback*<br>
	 * @param set_to_empty C type : set_to_empty_callback*<br>
	 * @param set_to_file C type : set_to_file_callback*<br>
	 * @param set_to_bytes C type : set_to_bytes_callback*<br>
	 * @param get_bytes_count C type : get_bytes_count_callback*<br>
	 * @param get_bytes C type : get_bytes_callback*
	 */
	public cef_post_data_element_t(cef_base_t base, cef.cef_response_t.is_read_only_callback is_read_only, cef_post_data_element_t.set_to_empty_callback set_to_empty, cef_post_data_element_t.set_to_file_callback set_to_file, cef_post_data_element_t.set_to_bytes_callback set_to_bytes, cef_post_data_element_t.get_bytes_count_callback get_bytes_count, cef_post_data_element_t.get_bytes_callback get_bytes) {
		super();
		this.base = base;
		this.is_read_only = is_read_only;
		this.set_to_empty = set_to_empty;
		this.set_to_file = set_to_file;
		this.set_to_bytes = set_to_bytes;
		this.get_bytes_count = get_bytes_count;
		this.get_bytes = get_bytes;
	}
	public cef_post_data_element_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_post_data_element_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_post_data_element_t implements Structure.ByValue {
		
	};
}
