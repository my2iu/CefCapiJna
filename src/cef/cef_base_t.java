package cef;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_base_capi.h:9</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_base_t extends Structure {
	public int size;
	/** C type : add_ref_callback* */
	public cef_base_t.add_ref_callback add_ref;
	/** C type : release_callback* */
	public cef_base_t.release_callback release;
	/** C type : has_one_ref_callback* */
	public cef_base_t.has_one_ref_callback has_one_ref;
	/** <i>native declaration : include\capi\cef_base_capi.h:6</i> */
	public interface add_ref_callback extends Callback {
		void apply(cef_base_t self);
	};
	/** <i>native declaration : include\capi\cef_base_capi.h:7</i> */
	public interface release_callback extends Callback {
		int apply(cef_base_t self);
	};
	/** <i>native declaration : include\capi\cef_base_capi.h:8</i> */
	public interface has_one_ref_callback extends Callback {
		int apply(cef_base_t self);
	};
	public cef_base_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("size", "add_ref", "release", "has_one_ref");
	}
	/**
	 * @param add_ref C type : add_ref_callback*<br>
	 * @param release C type : release_callback*<br>
	 * @param has_one_ref C type : has_one_ref_callback*
	 */
	public cef_base_t(int size, cef_base_t.add_ref_callback add_ref, cef_base_t.release_callback release, cef_base_t.has_one_ref_callback has_one_ref) {
		super();
		this.size = size;
		this.add_ref = add_ref;
		this.release = release;
		this.has_one_ref = has_one_ref;
	}
	public cef_base_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_base_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_base_t implements Structure.ByValue {
		
	};
}
