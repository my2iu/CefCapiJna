package cef;
import cef.CefLibrary._cef_frame_t;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_scheme_capi.h:11</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_scheme_handler_factory_t extends Structure {
	/** C type : cef_base_t */
	public cef_base_t base;
	/** C type : create_callback* */
	public cef_scheme_handler_factory_t.create_callback create;
	/** <i>native declaration : include\capi\cef_scheme_capi.h:10</i> */
	public interface create_callback extends Callback {
		cef_resource_handler_t apply(cef_scheme_handler_factory_t self, cef_browser_t browser, _cef_frame_t frame, cef_string_utf16_t scheme_name, cef_request_t request);
	};
	public cef_scheme_handler_factory_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("base", "create");
	}
	/**
	 * @param base C type : cef_base_t<br>
	 * @param create C type : create_callback*
	 */
	public cef_scheme_handler_factory_t(cef_base_t base, cef_scheme_handler_factory_t.create_callback create) {
		super();
		this.base = base;
		this.create = create;
	}
	public cef_scheme_handler_factory_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_scheme_handler_factory_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_scheme_handler_factory_t implements Structure.ByValue {
		
	};
}
