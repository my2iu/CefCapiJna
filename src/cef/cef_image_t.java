package cef;
import cef.CefLibrary._cef_binary_value_t;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\capi\cef_image_capi.h:29</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cef_image_t extends Structure {
	/** C type : cef_base_t */
	public cef_base_t base;
	/** C type : is_empty_callback* */
	public cef_image_t.is_empty_callback is_empty;
	/** C type : is_same_callback* */
	public cef.cef_v8value_t.is_same_callback is_same;
	/** C type : add_bitmap_callback* */
	public cef_image_t.add_bitmap_callback add_bitmap;
	/** C type : add_png_callback* */
	public cef_image_t.add_png_callback add_png;
	/** C type : add_jpeg_callback* */
	public cef_image_t.add_jpeg_callback add_jpeg;
	/** C type : get_width_callback* */
	public cef_image_t.get_width_callback get_width;
	/** C type : get_height_callback* */
	public cef_image_t.get_height_callback get_height;
	/** C type : has_representation_callback* */
	public cef_image_t.has_representation_callback has_representation;
	/** C type : remove_representation_callback* */
	public cef_image_t.remove_representation_callback remove_representation;
	/** C type : get_representation_info_callback* */
	public cef_image_t.get_representation_info_callback get_representation_info;
	/** C type : get_as_bitmap_callback* */
	public cef_image_t.get_as_bitmap_callback get_as_bitmap;
	/** C type : get_as_png_callback* */
	public cef_image_t.get_as_png_callback get_as_png;
	/** C type : get_as_jpeg_callback* */
	public cef_image_t.get_as_jpeg_callback get_as_jpeg;
	/** <i>native declaration : include\capi\cef_image_capi.h:16</i> */
	public interface is_empty_callback extends Callback {
		int apply(cef_image_t self);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:17</i> */
	public interface is_same_callback extends Callback {
		int apply(cef_image_t self, cef_image_t that);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:18</i> */
	public interface add_bitmap_callback extends Callback {
		int apply(cef_image_t self, float scale_factor, int pixel_width, int pixel_height, int color_type, int alpha_type, Pointer pixel_data, int pixel_data_size);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:19</i> */
	public interface add_png_callback extends Callback {
		int apply(cef_image_t self, float scale_factor, Pointer png_data, int png_data_size);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:20</i> */
	public interface add_jpeg_callback extends Callback {
		int apply(cef_image_t self, float scale_factor, Pointer jpeg_data, int jpeg_data_size);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:21</i> */
	public interface get_width_callback extends Callback {
		int apply(cef_image_t self);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:22</i> */
	public interface get_height_callback extends Callback {
		int apply(cef_image_t self);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:23</i> */
	public interface has_representation_callback extends Callback {
		int apply(cef_image_t self, float scale_factor);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:24</i> */
	public interface remove_representation_callback extends Callback {
		int apply(cef_image_t self, float scale_factor);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:25</i> */
	public interface get_representation_info_callback extends Callback {
		int apply(cef_image_t self, float scale_factor, FloatByReference actual_scale_factor, IntByReference pixel_width, IntByReference pixel_height);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:26</i> */
	public interface get_as_bitmap_callback extends Callback {
		_cef_binary_value_t apply(cef_image_t self, float scale_factor, int color_type, int alpha_type, IntByReference pixel_width, IntByReference pixel_height);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:27</i> */
	public interface get_as_png_callback extends Callback {
		_cef_binary_value_t apply(cef_image_t self, float scale_factor, int with_transparency, IntByReference pixel_width, IntByReference pixel_height);
	};
	/** <i>native declaration : include\capi\cef_image_capi.h:28</i> */
	public interface get_as_jpeg_callback extends Callback {
		_cef_binary_value_t apply(cef_image_t self, float scale_factor, int quality, IntByReference pixel_width, IntByReference pixel_height);
	};
	public cef_image_t() {
		super();
	}
	protected List <String> getFieldOrder() {
		return Arrays.asList("base", "is_empty", "is_same", "add_bitmap", "add_png", "add_jpeg", "get_width", "get_height", "has_representation", "remove_representation", "get_representation_info", "get_as_bitmap", "get_as_png", "get_as_jpeg");
	}
	public cef_image_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cef_image_t implements Structure.ByReference {
		
	};
	public static class ByValue extends cef_image_t implements Structure.ByValue {
		
	};
}
